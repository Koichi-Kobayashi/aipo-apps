<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="共有メモ"
                 description="ユーザー同士で共有することができるメモ集です。メモ集をクリップしておくことにより、初回に表示させたいメモ集を覚えさせておくことができます。"
                 height="35">
        <Require feature="views"/>
        <Require feature="dynamic-height"/>
        <Require feature="minimessage"/>
        <Require feature="osapi"/>
        <Require feature="setprefs"/>
        <Require feature="jquery"/>
        <Optional feature="aipostyle"/>
        <Icon>https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/shared-memo/img/icon/icon16-trans.png</Icon>
    </ModulePrefs>
    <UserPref name="version" datatype="hidden"/>
    <UserPref name="currentUserId" datatype="hidden"/>
    <UserPref name="currentGroupId" datatype="hidden"/>
    <UserPref name="currentCategoryId" datatype="hidden"/>
    <Content type="html"><![CDATA[
        <script type="text/javascript"
                src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/jquery-ui.min.js">
        </script>
        <style type="text/css"><!--

        #formField {
            border: 2px solid #cbcbcb;
            background: #ffffff;
            position: absolute;
            width: 250px;
            z-index: 9999;
            padding: 5px;
        }

        #formField .item {
            padding-bottom: 5px;
        }

        #formField .item h3 {
            margin-bottom: 5px;
        }

        #addMemo {
            background: url(https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/shared-memo/img/icon/icon_edit.gif) no-repeat;
            padding-left: 20px;
        }

        .ui-sortable li {
            cursor: pointer;
        }

        --></style>
        <div class="aipostyle">
            <div id="formContent">
                <form id="form" name="form" action="#">
                    <div id="formField" style="display:none;">
                        <div id="errors"></div>
                        <div class="item">
                            <h3>タイトル</h3>
                            <input id="title" type="text" class="text wide" value=""/>
                        </div>
                        <div class="item">
                            <h3>内容</h3>
                            <textarea id="contents" class="text wide" rows="6"></textarea>
                        </div>
                        <div class="item">
                            <div id="categoryInputField" style="display:none">
                                <input id="categoryInput" type="hidden" value=""/>
                            </div>
                            <div id="categorySelectField">
                                <input type="hidden" name="categorySelect" value="none"/>
                            </div>
                            <!--
                            <h3>カテゴリ</h3>

                            <div id="categoryInputField" style="display:none">
                                <input id="categoryInput" type="text" class="text" value="" style="width:200px"/>&nbsp;
                                <input id="categoryInputButton" type="button" onclick="swapCategoryField(false);"
                                       value="選択"/>
                            </div>
                            <div id="categorySelectField">
                                <select id="categorySelect2" name="categorySelect" style="width:200px">
                                    <option value="">読み込み中
                                    </option>
                                    &nbsp;
                                    <input id="categorySelectButton" type="button" onclick="swapCategoryField(true);"
                                           value="入力"/>
                            </div>
                            -->
                        </div>
                        <p class="center">
                            <input id="submit" type="submit" value=""/>&nbsp;
                            <input id="close" type="button" onclick="hideForm();" value="閉じる"/>
                        </p>
                    </div>
                    <table class="form wide">
                        <tr>
                            <th>ユーザー</th>
                            <td>
                                <select id="groupSelect" name="group"
                                        onchange="fetchPeople(this.options[this.selectedIndex].value, 0);">
                                    <option value="@all">読み込み中</option>
                                </select>
                                <select id="userSelect" name="user"
                                        onchange="fetch(this.options[this.selectedIndex].value, null);">
                                    <option value="">（選択してください）</option>
                                </select>
                            </td>
                        </tr>
                        <input type="hidden" name="category" value="none"/>
                        <!--
                        <tr>
                            <th>カテゴリ</th>
                            <td>
                                <select id="categorySelect1" name="category"
                                        onchange="fetch(null, this.options[this.selectedIndex].value);">
                                    <option value="">読み込み中</option>
                            </td>
                        </tr>
                        -->
                    </table>
                    <a id="addMemo" href="javascript:showForm_add();" style="display:none">メモを追加する</a>

                    <div id="memos" class="w90" style="padding:5px;"></div>
                    <input id="clipCheck" type="checkbox" name="clip" onchange="swapClip(this);"
                           onclick="this.blur();this.focus();" value=""/>
                    <label for="clipCheck">このメモ集をクリップする</label>
                </form>
            </div>
        </div>
        <script type="text/javascript">

        var version = "1.0";
        var changeLogUrl = "javascript:void(0);";

        gadgets.util.registerOnLoadHandler(init);

        var msg = new gadgets.MiniMessage();
        var staticMsg;
        var noticeMsg;
        var prefs = new gadgets.Prefs();
        var currentGroup = "";
        var currentGroupId = '@all';
        var currentUserId;
        var currentStartIndex = 0;
        var currentCategoryId = "none";
        var viewerId;
        var dispayName;
        var inputSelect = false;

        var submitFunc = function() {
            document.getElementById("errors").innerHTML = "";
            var title = document.form.title.value;
            var contents = document.form.contents.value;
            var categoryInput = document.form.categoryInput.value;
            var validate = true;
            if (!title) {
                alert("タイトルを入力してください。");
                validate = false;
            }
            else if (title.length > 30) {
                alert("タイトルは 30 文字以内で入力してください。");
                validate = false;
            }
            if (!contents) {
                alert("メモを入力してください。");
                validate = false;
            } else if (contents.length > 500) {
                alert("メモは 500 文字以内で入力してください。");
                validate = false;
            }

            if (validate) {
                if (inputSelect) {
                    addCategory(title, contents, categoryInput);
                } else {
                    /*
                     var category = document.form.categorySelect.value;
                     if (category) {
                     currentCategoryId = category;
                     }
                     */
                    addMemo(title, contents, currentCategoryId);
                }
                hideForm();
            }
            adjustHeight();

            return false;
        }

        function showMessage(text) {
            if (staticMsg) {
                msg.dismissMessage(staticMsg);
            }
            staticMsg = msg.createStaticMessage(text);
        }

        function showTimerMessage(text) {
            var timerMsg = msg.createTimerMessage(text, 3, function() {
                msg.dismissMessage(timerMsg);
                adjustHeight();
            });
        }

        function fetchGroups(startIndex) {
            var callback = function(response) {
                var mygroups = response.mygroup.list;
                var units = response.unit.list;
                var groupSelectDom = $('#groupSelect');
                groupSelectDom.empty();
                groupSelectDom.append($('<option>').attr({ value: '@all' }).text('（グループ全体）'));
                for (var i = 0; i < mygroups.length; i++) {
                    var group = mygroups[i];
                    var params = {};
                    params['value'] = group.id.groupId;
                    if (currentGroupId == group.id.groupId) {
                        params['selected'] = 'selected';
                    }
                    groupSelectDom.append($('<option>').attr(params).text(group.title));
                }
                if (mygroups.length > 0 && units.length > 0) {
                    groupSelectDom.append($('<option>').attr({ value: '' }).text('----------'));
                }
                for (var i = 0; i < units.length; i++) {
                    var group = units[i];
                    var params = {};
                    params['value'] = group.id.groupId;
                    if (currentGroupId == group.id.groupId) {
                        params['selected'] = 'selected';
                    }
                    groupSelectDom.append($('<option>').attr(params).text(group.title));
                }
                fetchPeople(currentGroupId);
            };
            var batch = osapi.newBatch()
                    .add('unit', osapi.groups.get({ userId: '@viewer', startIndex: startIndex, count: 1000, filterBy: 'type', filterValue: 'unit' }))
                    .add('mygroup', osapi.groups.get({ userId: '@viewer', startIndex: startIndex, count: 1000, filterBy: 'type', filterValue: 'mygroup' }));
            batch.execute(callback);
        }

        function fetchPeople(groupId, startIndex) {
            document.getElementById('formField').style.display = "none";
            if (groupId) {
                var callback = function(response) {
                    var people = response.people.list;
                    viewerId = response.viewer.id;
                    dispayName = response.viewer.dispayName;
                    if (!currentUserId) {
                        currentUserId = viewerId;
                    }
                    var userSelectDom = $('#userSelect');
                    userSelectDom.empty();
                    userSelectDom.append($('<option>').attr({ value: '' }).text('（選択して下さい）'));
                    var userIds = new Array();
                    var selectedUserId;
                    for (var i = 0; i < people.length; i++) {
                        var person = people[i];
                        var params = {};
                        params['value'] = person.id;
                        if (currentUserId == person.id) {
                            selectedUserId = currentUserId;
                            params['selected'] = 'selected';
                        }
                        userSelectDom.append($('<option>').attr(params).text(person.displayName));
                    }
                    currentUserId = selectedUserId;
                    fetch(currentUserId, currentCategoryId);
                };
                var params = { userId: '@viewer', groupId: groupId, startIndex: startIndex, count: 1000 };
                var batch = osapi.newBatch()
                        .add('people', osapi.people.get(params))
                        .add('viewer', osapi.people.getViewer());
                batch.execute(callback);
                currentGroupId = groupId;
            }
        }

        function fetchCategory() {
            var posKey = 'cat.pos';
            if (currentUserId) {
                var callback1 = function(response1) {
                    var categories1 = response1[currentUserId];
                    var keys = new Array();
                    if (categories1 && categories1[posKey]) {
                        keys = gadgets.json.parse(categories1[posKey]);
                    }
                    var callback2 = function(response2) {
                        var categories2 = response2[currentUserId];
                        var categorySelect1 = $('#categorySelect1');
                        var categorySelect2 = $('#categorySelect2');
                        categorySelect1.empty();
                        categorySelect2.empty();
                        categorySelect1.append($('<option>').attr({ value: 'none' }).text('（未分類）'));
                        categorySelect2.append($('<option>').attr({ value: 'none' }).text('（未分類）'));
                        if (categories2) {
                            for (var key in keys) {
                                var value = categories2[keys[key]];
                                var cat = gadgets.json.parse(value);

                                var params = {};
                                params['value'] = keys[key];
                                if (currentCategoryId == keys[key]) {
                                    params['selected'] = 'selected';
                                }
                                categorySelect1.append($('<option>').attr(params).text(cat.title));
                                categorySelect2.append($('<option>').attr(params).text(cat.title));
                            }
                        }
                        fetchMemo();
                    }
                    osapi.appdata.get({ userId: [currentUserId] ,fields: keys }).execute(callback2);
                }
                osapi.appdata.get({ userId: [currentUserId] ,fields: [posKey] }).execute(callback1);
            } else {
                var categorySelect1 = $('#categorySelect1');
                var categorySelect2 = $('#categorySelect2');
                categorySelect1.empty();
                categorySelect2.empty();
                categorySelect1.append($('<option>').attr({ value: 'none' }).text('（未分類）'));
                categorySelect2.append($('<option>').attr({ value: 'none' }).text('（未分類）'));
                fetchMemo();
            }
        }

        function adjustHeight() {
            if (document.getElementById('formField').style.display != "none") {
                var dimensions = gadgets.window.getViewportDimensions();
                if (dimensions['height'] <= 260) {
                    gadgets.window.adjustHeight(260);
                }
            } else {
                gadgets.window.adjustHeight();
            }
        }

        function showForm() {
            document.getElementById('formField').style.display = "";
            document.form.title.focus();
            adjustHeight();
        }

        function showForm_add() {
            document.form.title.value = "";
            document.form.contents.value = "";
            document.form.submit.value = "追加する";

            document.form.submit.style.display = "";
            document.form.onsubmit = submitFunc;

            showForm();
        }

        function showForm_edit(title, contents, deleteKey) {
            document.form.title.value = gadgets.util.unescapeString(title);
            document.form.contents.value = gadgets.util.unescapeString(contents);
            document.form.submit.value = "編集する";

            document.form.submit.style.display = "";
            var submitEditFunc = function() {
                deleteMemo_edit(deleteKey);
                return false;
            }
            document.form.onsubmit = submitEditFunc;

            showForm();
        }

        function showForm_read(title, contents) {
            document.form.title.value = gadgets.util.unescapeString(title);
            document.form.contents.value = gadgets.util.unescapeString(contents);

            document.form.submit.style.display = "none";

            showForm();
        }

        function hideForm() {
            document.getElementById('formField').style.display = "none";
            adjustHeight();
        }

        function swapCategoryField(input) {
            document.getElementById('categoryInputField').style.display = input ? "" : "none";
            document.getElementById('categorySelectField').style.display = input ? "none" : "";
            inputSelect = input;
        }

        function swapClip(input) {
            if (input.checked) {
                prefs.set("currentUserId", currentUserId, "currentGroupId", currentGroupId, "currentCategoryId", currentCategoryId);
            } else {
                prefs.set("currentUserId", "", "currentGroupId", "", "currentCategoryId", "");
            }
        }

        function fetch(userId, categoryId) {
            document.getElementById('formField').style.display = "none";
            if (!userId) {
                userId = currentUserId;
            }
            if (!categoryId) {
                categoryId = currentCategoryId;
            }
            currentUserId = userId;
            currentCategoryId = categoryId;

            fetchCategory();
        }

        function fetchMemo() {
            var userId = prefs.getString("currentUserId");
            var groupId = prefs.getString("currentGroupId");
            var categoryId = prefs.getString("currentCategoryId");
            if (userId == currentUserId && groupId == currentGroupId && categoryId == currentCategoryId) {
                document.form.clip.checked = true;
            } else {
                document.form.clip.checked = false;
            }
            if (currentUserId) {
                document.getElementById('addMemo').style.display = (viewerId == currentUserId) ? "" : "none";
                var posKey = 'pos.' + currentCategoryId;
                var callback1 = function(response1) {
                    var memos1 = response1[currentUserId];
                    var keys = new Array();
                    if (memos1 && memos1[posKey]) {
                        keys = gadgets.json.parse(memos1[posKey]);
                    }
                    var callback2 = function(response2) {
                        var memos2 = response2[currentUserId];
                        if (memos2) {
                            for (var key in keys) {
                                var contents = memos2[keys[key]];
                            }
                            if (keys.length > 0) {

                                var ul = document.createElement('ul');
                                ul.id = "sortable";
                                for (var key in keys) {
                                    var value = memos2[keys[key]];
                                    var memo = gadgets.json.parse(value);
                                    var title = gadgets.util.escapeString(memo.title);
                                    var contents = gadgets.util.escapeString(memo.contents);
                                    var deleteKey = gadgets.util.escapeString(keys[key]);

                                    var li = document.createElement('li');
                                    li.id = deleteKey;
                                    ul.appendChild(li);

                                    var a = document.createElement('a');
                                    li.appendChild(a);
                                    if (viewerId == currentUserId) {
                                        a.setAttribute("href", "javascript:showForm_edit('" + title + "', '" + contents + "', '" + deleteKey + "');");
                                    } else {
                                        a.setAttribute("href", "javascript:showForm_read('" + title + "', '" + contents + "');");
                                    }
                                    a.appendChild(document.createTextNode(gadgets.util.unescapeString(title)));

                                    if (viewerId == currentUserId) {
                                        li.appendChild(document.createTextNode(" "));

                                        var span = document.createElement('span');
                                        li.appendChild(span);
                                        span.setAttribute("class", "small");
                                        span.setAttribute("style", "display:none;");

                                        var deleteLink = document.createElement('a');
                                        span.appendChild(deleteLink);
                                        deleteLink.setAttribute("href", "javascript:deleteMemo_confirm(\'" + deleteKey + "\');");
                                        deleteLink.appendChild(document.createTextNode('削除'));
                                    }
                                }
                                var memos = document.getElementById('memos');
                                for (var i = memos.childNodes.length - 1; i >= 0; i--) {
                                    memos.removeChild(memos.childNodes[i]);
                                }
                                memos.appendChild(ul);

                                if (viewerId == currentUserId) {
                                    $("#sortable").sortable({
                                        update: function(event, ui) {
                                            osapi.appdata.get({ userId: ["@viewer"] ,fields: [posKey] }).execute(function(response3) {
                                                var memos3 = response3[viewerId];
                                                var keys2 = new Array();
                                                if (memos3 && memos3[posKey]) {
                                                    keys2 = gadgets.json.parse(memos3[posKey]);
                                                }
                                                var newKeys = $('#sortable').sortable('toArray');
                                                var validate = true;
                                                for (var i in keys2) {
                                                    if (jQuery.inArray(keys2[i], newKeys) == -1) {
                                                        validate = false;
                                                        break;
                                                    }
                                                }
                                                if (validate) {
                                                    var data = {};
                                                    data[posKey] = gadgets.json.stringify($('#sortable').sortable('toArray'));
                                                    osapi.appdata.update({ userId: '@viewer', data: data, appId: '@app' }).execute(function() {
                                                    });
                                                } else {
                                                    showTimerMessage("一覧が古かったため並び替えできませんでした。");
                                                    fetchMemo(viewerId);
                                                }
                                            });
                                        }
                                    }).disableSelection();
                                    $("#sortable li").hover(
                                            function () {
                                                $("#sortable li").find("span:last").hide();
                                                $(this).find("span:last").show();
                                            },
                                            function () {
                                                $(this).find("span:last").hide();
                                            }
                                    );
                                }
                                adjustHeight();
                            } else {
                                document.getElementById('memos').innerHTML = "メモがありません。";
                                adjustHeight();
                            }
                        }
                        else {
                            document.getElementById('memos').innerHTML = "メモがありません。";
                            adjustHeight();
                        }
                    }
                    osapi.appdata.get({ userId: [currentUserId] ,fields: keys }).execute(callback2);
                }
                osapi.appdata.get({ userId: [currentUserId] ,fields: [posKey] }).execute(callback1);
            }
            else {
                document.getElementById('addMemo').style.display = "none";
                document.getElementById('memos').innerHTML = "ユーザーを選択してください。";
                adjustHeight();
            }
        }

        function addMemo(title, contents, categoryId) {
            var posKey = 'pos.' + categoryId;
            osapi.appdata.get({ userId: ["@viewer"] ,fields: [posKey] }).execute(function(response) {
                if (response.error){
                    showTimerMessage("メモの追加に失敗しました。");
                    return;
                }

                var memos = response[viewerId];
                var keys = new Array();
                if (memos && memos[posKey]) {
                    keys = gadgets.json.parse(memos[posKey]);
                }

                var callback = function(response2) {
                    swapCategoryField(false);
                    if (response2.error) {
                        showTimerMessage("メモの追加に失敗しました。");
                    } else {
                        showTimerMessage("メモを追加しました。");
                        fetch(viewerId, categoryId);
                    }
                };

                var timestamp = new Date().getTime();
                var key = '__MODULE_ID__.' + timestamp;
                keys.push(key);

                var memo = {};
                memo['title'] = title;
                memo['contents'] = contents;
                var data1 = {};
                data1[key] = gadgets.json.stringify(memo);

                var data2 = {};
                data2[posKey] = gadgets.json.stringify(keys);

                var batch = osapi.newBatch()
                        .add('update1', osapi.appdata.update({ userId: '@viewer', data: data1, appId: '@app' }))
                        .add('update2', osapi.appdata.update({ userId: '@viewer', data: data2, appId: '@app' }));
                batch.execute(callback);
            });
        }

        function addCategory(title, contents, category) {
            var posKey = 'cat.pos';
            osapi.appdata.get({ userId: ["@viewer"] ,fields: [posKey] }).execute(function(response) {
                var memos = response[viewerId];
                var keys = new Array();
                if (memos && memos[posKey]) {
                    keys = gadgets.json.parse(memos[posKey]);
                }

                var timestamp = new Date().getTime();
                var key = 'cat.__MODULE_ID__.' + timestamp;
                keys.push(key);

                var callback = function(response2) {
                    if (response2.error) {
                        showTimerMessage("カテゴリの追加に失敗しました。");
                        return null;
                    } else {
                        currentCategoryId = key;
                        addMemo(title, contents, currentCategoryId);
                        return key;
                    }
                };

                var cat = {};
                cat['title'] = category;
                var data1 = {};
                data1[key] = gadgets.json.stringify(cat);

                var data2 = {};
                data2[posKey] = gadgets.json.stringify(keys);

                var batch = osapi.newBatch()
                        .add('update1', osapi.appdata.update({ userId: '@viewer', data: data1, appId: '@app' }))
                        .add('update2', osapi.appdata.update({ userId: '@viewer', data: data2, appId: '@app' }));
                batch.execute(callback);
            });
        }

        function deleteMemo(callback, deleteKey) {
            var posKey = 'pos.' + currentCategoryId;
            osapi.appdata.get({ userId: ["@viewer"] ,fields: [posKey, "cat.pos"] }).execute(function(response) {
                var memos = response[viewerId];
                var keys = new Array();
                if (memos && memos[posKey]) {
                    keys = gadgets.json.parse(memos[posKey]);
                }

                var newKeys = new Array();
                for (var key in keys) {
                    if (keys[key] != deleteKey) {
                        newKeys.push(keys[key]);
                    }
                }

                var data = {};
                data[posKey] = gadgets.json.stringify(newKeys);

                var batch = osapi.newBatch()
                        .add('delete', osapi.appdata['delete']({ userId: '@viewer', fields: [deleteKey], appId: '@app' }))
                        .add('update', osapi.appdata.update({ userId: '@viewer',   data: data,  appId: '@app' }));
                var size = newKeys.length;
                if (size == 0) {
                    keys = new Array();
                    if (memos && memos["cat.pos"]) {
                        keys = gadgets.json.parse(memos["cat.pos"]);
                    }

                    newKeys = new Array();
                    for (var key in keys) {
                        if (keys[key] != currentCategoryId) {
                            newKeys.push(keys[key]);
                        }
                    }

                    data = {};
                    data['cat.pos'] = gadgets.json.stringify(newKeys);

                    batch.add('cdelete', osapi.appdata['delete']({ userId: '@viewer', fields: [currentCategoryId], appId: '@app' }))
                            .add('cupdate', osapi.appdata.update({ userId: '@viewer',   data: data,                appId: '@app' }));
                }
                batch.execute(callback);
            });
        }

        function deleteMemo_normal(deleteKey) {
            var callback = function(response2) {
                if (response2.error) {
                    showTimerMessage("メモの削除に失敗しました。");
                } else {
                    fetch(viewerId, null);
                }
            };
            deleteMemo(callback, deleteKey);
        }

        function deleteMemo_edit(deleteKey) {
            var callback = function(response2) {
                if (response2.error) {
                    showTimerMessage("メモの削除に失敗しました。");
                } else {
                    submitFunc();
                    fetch(viewerId, null);
                }
            };
            deleteMemo(callback, deleteKey);
        }

        function deleteMemo_confirm(deleteKey) {
            if (confirm("このメモを削除してよろしいでしょうか？")) {
                deleteMemo_normal(deleteKey)
            }
        }

        function showVersion() {
            var span = document.createElement("span");
            span.innerHTML = "<a href='" + changeLogUrl + "' target='_blank'>バージョン " + version + " にアップデートされました。<\/a>";
            var versionMsg = msg.createDismissibleMessage(span, function() {
                msg.dismissMessage(versionMsg);
                adjustHeight();
            });
        }

        function init() {
            var oldVersion = prefs.getString("version");
            if (version != oldVersion) {
                if (oldVersion) {
                    showVersion();
                }
                prefs.set("version", version);
            }
            var currentView = gadgets.views.getCurrentView();
            var supportViews = gadgets.views.getSupportedViews();
            if (currentView.getName() == 'canvas') {
                // ...
            } else {
                // ...
            }
            var userId = prefs.getString("currentUserId");
            if (userId) {
                currentUserId = userId;
            }
            var groupId = prefs.getString("currentGroupId");
            if (groupId) {
                currentGroupId = groupId;
            }
            var categoryId = prefs.getString("currentCategoryId");
            if (categoryId) {
                currentCategoryId = categoryId;
            }
            fetchGroups(0);
            adjustHeight();
        }


        </script>
        ]]>
    </Content>
</Module>