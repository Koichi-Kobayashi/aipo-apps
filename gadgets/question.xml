<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs
        title="社内クエスチョン"
        description="社内向けのアンケートです。">
    <Require feature="views"/>
    <Require feature="dynamic-height"/>
    <Require feature="minimessage"/>
    <Require feature="tabs"/>
    <Require feature="aipostyle"/>
    <Require feature="osapi"/>
    <Icon>https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/nomi-iko/img/icon/icon16-trans.png</Icon>
</ModulePrefs>
<Content type="html"><![CDATA[
<div class="aipostyle">
    <table class="wide borderNone">
        <tbody>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;"
                                              onfocus="eventCommentFocus()"
                                              onblur="eventCommentBlur()" maxlength=100
                                              id="comment"/><input type="button" value="投稿する"
                                                                   onclick="eventSubmit()" style="margin:0 0 0 10px;"/>
            </td>
        </tbody>
    </table>

    <table class="wide borderNone">
        <tbody id = "choiceslist">
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice0"
                                              onfocus="eventChoicesFocus(0)"
                                              onblur="eventChoicesBlur(0)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice1"
                                              onfocus="eventChoicesFocus(1)"
                                              onblur="eventChoicesBlur(1)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice2"
                                              onfocus="eventChoicesFocus(2)"
                                              onblur="eventChoicesBlur(2)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice3"
                                              onfocus="eventChoicesFocus(3)"
                                              onblur="eventChoicesBlur(3)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice4"
                                              onfocus="eventChoicesFocus(4)"
                                              onblur="eventChoicesBlur(4)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice5"
                                              onfocus="eventChoicesFocus(5)"
                                              onblur="eventChoicesBlur(5)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice6"
                                              onfocus="eventChoicesFocus(6)"
                                              onblur="eventChoicesBlur(6)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice7"
                                              onfocus="eventChoicesFocus(7)"
                                              onblur="eventChoicesBlur(7)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice8"
                                              onfocus="eventChoicesFocus(8)"
                                              onblur="eventChoicesBlur(8)"/>
            </td>
        <tr>
            <td class="borderNone pb5"><input type="text" style="color:gray;display:none;"
                                              maxlength=100
                                              id="choice9"
                                              onfocus="eventChoicesFocus(9)"
                                              onblur="eventChoicesBlur(9)"/>
            </td>
        </tbody>
    </table>

    <table class="wide borderNone">
        <tbody>
        <td><a href = "javascript:addQuestion()">選択肢を追加する</a></td>
        </tbody>
    </table>

    <table class="wide borderNone">
        <tbody>
        <td><a href = "javascript:deleteQuestion()">選択肢を排除する</a></td>
        </tbody>
    </table>

    <table class="wide borderNone">
        <tbody id="result">
        </tbody>
    </table>

    <table class="listTable">
        <tbody id="status">
        </tbody>
    </table>
    <div id="pager"></div>
</div>

<script type="text/javascript" src="https://d2hv4ldeur9lfv.cloudfront.net/opensocial-jquery-1.3.2.5.min.js">
</script>
<script>
gadgets.util.registerOnLoadHandler(init);

var choices = new Array(10);
choices[0] = choice0;
choices[1] = choice1;
choices[2] = choice2;
choices[3] = choice3;
choices[4] = choice4;
choices[5] = choice5;
choices[6] = choice6;
choices[7] = choice7;
choices[8] = choice8;
choices[9] = choice9;

var choicesCheck = new Array(10);

var choicesCount = 0;

var groups = null;

var commentCheck = false;
var commentNotice = "質問する";

var choicesNotice = "選択肢を追加";

var table = null;
var page_pre = null;
var page_next = null;
var prefs = new gadgets.Prefs();
var page = 0;
var pageCount = 0;


/*
 * init
 */
function init() {
    // コメント
    for (var i = 0; i < 10; i++) {
        eventChoicesBlur(i);
    }
    eventCommentBlur();
    repaint();
}

/*
* submit
*/
function eventSubmit() {
    osapi.people.get({ userId: '@viewer' }).execute(function(response) {
        var msg = new gadgets.MiniMessage();
        // フォームから値の取得
        var comment = $("#comment").val();
        var choicesVal = new Array(10);
        for (var i = 0; i < choicesCount; i++){
            choicesVal[i] = $(choices[i]).val();
        }
        if (!commentCheck && comment == commentNotice) {
            comment = "";
        }
        for (var i = 0; i < choicesCount; i++){
            if(!choicesCheck[i] && choicesVal[i] == choicesNotice) {
                choicesVal[i] = "";
            }
        }
        // 時間の取得
        var date = (new Date()).getTime() + "";
        // バリデート
        if (!comment) {
            msg.createTimerMessage("質問を入力してください。", 5);
            gadgets.window.adjustHeight();
            return false;
        }
        for (var i = 0; i < choicesCount; i++){
            if (!choicesVal[i]) {
                msg.createTimerMessage("追加した選択肢は全て入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }
        }

        comment = gadgets.util.escapeString(comment);
        date = gadgets.util.escapeString(date);
        var count = gadgets.util.escapeString(choicesCount.toString());
        var userId = gadgets.util.escapeString(response.id);
        for (var i = 0; i < choicesCount; i++){
            choicesVal[i] = gadgets.util.escapeString(choicesVal[i]);
        }

        var data = {};
        var data1;
        data['comment'] = comment;
        data['date'] = date;
        data['count'] = count;
        data['user'] = userId;
        for (var i = 0; i < choicesCount; i++){
            data['choice' + i] = choicesVal[i];
        }
        data1 = gadgets.json.stringify(data);
        // post a message
        $.post("https://aipoquestion.appspot.com/_je/question", { createdby: response.id, messageBody: data1 }, function (result){
            // minimessage
            msg.createTimerMessage("送信しました。", 3, function() {
                $("#comment").val("");
                for(var i = 0 ; i < choicesCount; i++){
                    $(choices[i]).val("");
                    $(choices[i]).hide();
                }
                choicesCount = 0;
                gadgets.window.adjustHeight();
                return true;
            });
            // データの再表示
            repaint();
        }, "text");
    });
}

function vote(key, i, isChecked){
    var msg = new gadgets.MiniMessage();
    $("#result").html("<h1>please wait...</h1>");
    $.getJSON("https://aipoquestion.appspot.com/_je/question", { _docId: key }, function (result) {
        var data = gadgets.json.parse(result.messageBody);
        var supporters = new Array();
        if (data && data['supporters' + i]) {
            supporters = gadgets.json.parse(data['supporters' + i]);
        }
        osapi.people.get({ userId: '@viewer' }).execute(function(response) {
            var userId = response.id;
            if(isChecked){
                supporters.push(gadgets.util.escapeString(userId));
                data['supporters' + i] = gadgets.json.stringify(supporters);
            }
            else{
                var new_supporters = new Array();
                for(var j in supporters){
                    if(supporters[j] != userId){
                        new_supporters.push(gadgets.util.escapeString(supporters[j]));
                    }
                }
                data['supporters' + i] = gadgets.json.stringify(new_supporters);
            }
            data1 = gadgets.json.stringify(data);
            $.post("https://aipoquestion.appspot.com/_je/question", { messageBody: data1,_docId: key }, function (result) {
                repaint();
            });
        });

    });
}


function deleteItem(key) {
    if (confirm("この質問を削除してよろしいでしょうか？")) {
    $.post("https://aipoquestion.appspot.com/_je/question", { _method: "delete", _docId:  key }, function (result){
            var msg = new gadgets.MiniMessage();
            msg.createTimerMessage("質問を排除しました。", 5);
            repaint();
        },"text");
    }
}

function addQuestion() {
    if (choicesCount < 10) {
        $(choices[choicesCount++]).show();
        gadgets.window.adjustHeight();
    }
}

function deleteQuestion() {
    if (choicesCount > 0) {
        var i = --choicesCount;
        $(choices[i]).hide();
        $(choices[i]).val("");
        eventChoicesBlur(i);
        gadgets.window.adjustHeight();
    }
}

function eventCommentFocus() {
    if (!commentCheck && $("#comment").val() == commentNotice) {
        $("#comment").val("");
        commentCheck = true;
    }
    $("#comment").css("color", "black");
}

function eventCommentBlur() {
    if ($("#comment").val() == "") {
        $("#comment").val(commentNotice);
        commentCheck = false;
        $("#comment").css("color", "gray");
    }
}

function eventChoicesFocus(num) {
    if (!choicesCheck[num] && $(choices[num]).val() == choicesNotice) {
        $(choices[num]).val("");
        choicesCheck[num] = true;
    }
    $(choices[num]).css("color", "black");
}

function eventChoicesBlur(num) {
    if ($(choices[num]).val() == "") {
        $(choices[num]).val(choicesNotice);
        choicesCheck[num] = false;
        $(choices[num]).css("color", "gray");
    }
}

/*
* テーブルの再描画
*/
function repaint() {
    osapi.people.get({ userId: '@viewer', groupId: '@all'}).execute(function(response) {
        var msg = new gadgets.MiniMessage();
        // テーブルの初期化
        $("#result").html("");
        var users = [];
        var list = response.list;
        for (var i in list) {
            users[list[i].id] = list[i];
        }
        $.getJSON("https://aipoquestion.appspot.com/_je/question", { sort: "_createdAt.desc", limit: 100}, function (result) {
            osapi.people.get({ userId: '@viewer' }).execute(function(response2) {
                var userId = response2.id;
                for(var i = 0; i < result.length; i++){
                    var data = [];
                    var userName = users[result[i].createdby].displayName;
                    var key = result[i]._docId;
                    data = gadgets.json.parse(result[i].messageBody);
                    var this_choices = '';
                    for(var j = 0; j < data["count"]; j++){
                        var add_users = '';
                        var isSupported = false;
                        var supporters = new Array();
                        if (data && data['supporters' + j]) {
                            supporters = gadgets.json.parse(data['supporters' + j]);
                        }
                        for(var k in supporters){
                            if(supporters[k] == userId){
                                isSupported = true;
                            }
                            if(add_users != ''){
                                add_users += ', ';
                            }
                        add_users += users[supporters[k]].displayName;
                        }
                        if(isSupported){
                            this_choices = this_choices
                                    + '<input type="checkbox" checked=true onclick="vote('
                                    + "'" + gadgets.util.escapeString(key) + "'" + ',' + j + ',' + false + ')">';
                        }else{
                            this_choices = this_choices
                                    + '<input type="checkbox" onclick="vote('
                                    + "'" + gadgets.util.escapeString(key) + "'" + ',' + j + ',' + true + ')">';
                        }
                        this_choices = this_choices
                                + ' ' + gadgets.util.escapeString(data["choice" + j])
                                + ' ' + supporters.length
                                + ' ' + gadgets.util.escapeString(add_users)
                                + '<br>';
                    }
                    var key_data = '';
                    key_data = key_data
                            +'<br>'
                            + '<h1>投稿日時 : ' + gadgets.util.escapeString(getDate(data["date"])) + '</h1>'
                            + '<h1>投稿者 : ' + userName + '</h1>'
                            + '<h1>質問 : ' + gadgets.util.escapeString(data["comment"]);
                    if(userId == result[i].createdby){
                        key_data = key_data
                                + '<input type="button" style="margin:0 0 0 10px" onclick="deleteItem('
                                +  "'" + gadgets.util.escapeString(key) + "'" + ')" value='
                                + '質問を排除' + '>';
                    }
                    key_data = key_data
                            + '</h1>'
                            + this_choices;
                    // データの表示
                    $("#result").html($("#result").html() + key_data);
                    // ウインドウの幅再調整
                    gadgets.window.adjustHeight();
                }
            });
        });
    });
}


/*
 * 引数で与えられた時刻を整形して返す
 * @param time 1900年からのms
 */
function getDate(time) {
    var date = getDateArray(time);
    return date.year + "/" + date.month + "/" + date.day + " (" + date.week + ") " + date.hour + "：" + date.minute;
}

/*
 * 時刻を配列で返す
 * @param time 1900年からの秒数
 * @return date[] [time,year,month,day,week,hour,minute]
 * ex) date.year
 */
function getDateArray(time) {
    var r = {};
    var weeks = new Array('日', '月', '火', '水', '木', '金', '土');

    var date = new Date();
    date.setTime(time);
    r.time = time;

    r.year = date.getYear();
    r.month = date.getMonth() + 1;
    r.day = date.getDate();
    r.week = weeks[ date.getDay() ];
    r.hour = date.getHours();
    r.minute = date.getMinutes();

    if (r.year < 2000) {
        r.year += 1900;
    }

    // 頭に0を付ける
    if (r.month < 10) {
        r.month = "0" + r.month;
    }
    if (r.day < 10) {
        r.day = "0" + r.day;
    }
    if (r.hour < 10) {
        r.hour = "0" + r.hour;
    }
    if (r.minute < 10) {
        r.minute = "0" + r.minute;
    }

    return r;
}


</script>
]]>
</Content>
</Module>