<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="つぶやき"
            description="短いメッセージでやり取りするシンプルなコミュニケーションツールです。発言ごとにコメントを返せるなど、リアルタイムな情報共有に役立ちます。" height="100">
        <Require feature="views"/>
        <Require feature="tabs"/>
        <Require feature="dynamic-height"/>
        <Require feature="minimessage"/>
        <Require feature="osapi"/>
        <Require feature="setprefs"/>
        <Require feature="jquery"/>
        <Optional feature="wave"/>
        <Optional feature="aipostyle"/>
        <Icon>https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/microblog/img/icon/icon16-trans.png</Icon>
    </ModulePrefs>
    <UserPref name="p2homeHeight" display_name="コンテンツの高さ（通常時）" datatype="enum" default_value="0">
        <EnumValue value="0" display_value="コンテンツの高さに合わせる"/>
        <EnumValue value="250" display_value="250px"/>
        <EnumValue value="500" display_value="500px"/>
        <EnumValue value="750" display_value="750px"/>
        <EnumValue value="1000" display_value="1000px"/>
    </UserPref>
    <UserPref name="p3canvasHeight" display_name="コンテンツの高さ（最大化時）" datatype="enum" default_value="0">
        <EnumValue value="0" display_value="コンテンツの高さに合わせる"/>
        <EnumValue value="250" display_value="250px"/>
        <EnumValue value="500" display_value="500px"/>
        <EnumValue value="750" display_value="750px"/>
        <EnumValue value="1000" display_value="1000px"/>
    </UserPref>
    <UserPref name="p4homeCount" display_name="表示件数（通常時）" datatype="enum" default_value="10">
        <EnumValue value="5" display_value="5件"/>
        <EnumValue value="10" display_value="10件"/>
        <EnumValue value="20" display_value="20件"/>
        <EnumValue value="50" display_value="50件"/>
    </UserPref>
    <UserPref name="p5canvasCount" display_name="表示件数（最大化時）" datatype="enum" default_value="20">
        <EnumValue value="5" display_value="5件"/>
        <EnumValue value="10" display_value="10件"/>
        <EnumValue value="20" display_value="20件"/>
        <EnumValue value="50" display_value="50件"/>
    </UserPref>
    <UserPref name="version" datatype="hidden"/>
    <Content type="html" view="canvas,home,popup"><![CDATA[
        <style type="text/css">

            #wrapper {
                padding-top: 3px;
                max-width: 840px;
                margin: 0 auto;
            }

            .message {
                margin-top: 3px;
                padding-top: 5px;
                border-top: 1px solid #dcdcdc;
            }

            .comments .message {
                padding: 2px;
                border: none;
                background: #efefef url(../images/common/bg_slash.gif) repeat left top;
            }

            .on {
                border-top: 1px solid #999999;
            }

            #content {
                padding-right: 10px;
            }

            #inputField {
                margin-bottom: 5px;
            }

            textarea.elastic {
                width: 99%;
                overflow: hidden;
                border: 0px;
                resize: none;
                outline: 0;
                line-height: normal;
                height: 21px;
                -webkit-appearance: caret;
            }

            .commentField {
                padding-left: 30px;
                display: none;
                /*margin-bottom: 5px;*/
            }

            .outer {
                border: 1px #cdcdcd solid;
                padding: 3px;
                margin-bottom: 5px;
            }

            .commentInputDummy {
                margin-top: 5px;
                margin-bottom: 10px;
                padding: 2px;
                border: 1px #cdcdcd solid;
                color: #aaaaaa;
                cursor: text;
            }

            .comments {
                padding-left: 30px;
            }

            .count {
                padding-right: 5px;
                font-size: 80%;
                *font-size: 75%;
                color: #434343;
            }

            .alert {
                color: #ff0000;
            }

            .commentCaption {
                margin-top: 5px;
                padding: 3px;
                background: #efefef url(../images/common/bg_slash.gif) repeat left top;
            }

            .readMore {
                margin-top: 5px;
                padding: 3px;
                background: #efefef url(../images/common/bg_slash.gif) repeat left top;
                border: 1px #cdcdcd solid;
                text-align: center;
            }

            .readMore a {
                display: block;
            }

            .timeline {
                width: 100%;
                word-break: break-all;
                word-wrap: break-word;
            }

            .timeline .name {
                /*color: #369;*/
                font-weight: bold;
                padding-right: 5px;
            }

            .timeline .name a {
            }

            .timeline .name a:hover {
            }

            .timeline .body {
                padding-top: 3px;
                min-height: 25px;
                padding-bottom: 5px;
            }

            .timeline .time {
                font-size: 80%;
                *font-size: 75%;
                color: #434343;
            }

            br {
                letter-spacing: 0;
            }


        </style>
        ]]></Content>
    <Content type="html" view="canvas,home"><![CDATA[
        <div id="wrapper" class="aipostyle">
            <div id="messageContainer"></div>
            <div id="inputField">
                <form action="#" method="post" onsubmit="return false;">
                    <div class="outer">
                        <textarea class="elastic" name="text" cols="10" rows="1" style="border: 0px;"></textarea>
                    </div>
                    <div class="right">
                        <span style="display:none" id="indicator" class="indicator">&nbsp;</span><span id="textCount"
                                                                                                       class="count">500 文字</span><input
                            id="postButton" type="button" name="share"
                            value="発言する"/>
                    </div>
                </form>
            </div>
            <div class="timeline">
                <div id="content"><span id="indicatorContent" class="indicator">読み込み中</span></div>
            </div>
        </div>
        ]]></Content>
    <Content type="html" view="popup"><![CDATA[
        <div id="wrapper" class="aipostyle">
            <div id="messageContainer"></div>
            <div class="timeline">
                <div id="content"><span id="indicatorContent" class="indicator">読み込み中</span></div>
            </div>
        </div>
        ]]></Content>
    <Content type="html" view="canvas,home,popup"><![CDATA[
        <script type="text/javascript">

        (function($) {

            $.fn.autogrow = function(options) {

                this.filter('textarea').each(function() {

                    var $this = $(this),
                            minHeight = 21,
                            lineHeight = $this.css('lineHeight');
                    var shadow = $('<div></div>').css({
                        position:   'absolute',
                        top:        -10000,
                        left:       -10000,
                        border:    0,
                        outline:    0,
                        width:      $(this).width() - parseInt($this.css('paddingLeft')) - parseInt($this.css('paddingRight')),
                        fontFamily: $this.css('fontFamily'),
                        lineHeight: 'normal',
                        'word-wrap': 'break-word',
                        height: 'auto',
                        resize:     'none'
                    }).appendTo(document.body);

                    var update = function() {

                        var times = function(string, number) {
                            var _res = '';
                            for (var i = 0; i < number; i ++) {
                                _res = _res + string;
                            }
                            return _res;
                        };

                        var val = this.value.replace(/</g, '&lt;')
                                .replace(/>/g, '&gt;')
                                .replace(/&/g, '&amp;')
                                .replace(/\n$/, '<br/>&nbsp;')
                                .replace(/\n/g, '<br/>')
                                .replace(/ {2,}/g, function(space) {
                                    return times('&nbsp;', space.length) + ' ';
                                });

                        shadow.html(val + '&nbsp;&nbsp;');
                        $(this).css('height', Math.max(shadow.height() + 3 + 18, minHeight));

                        gadgets.window.adjustHeight();

                    }

                    $(this).change(update).keyup(update).keydown(update).focus(update);

                    update.apply(this);

                });

                return this;

            }

        })(jQuery);

        function CronTask(task, interval, isDecay) {
            this.task = task;
            this.isDecay = isDecay;
            this.interval = interval;
            this.decayRate = 1;
            this.decayMultiplier = 1.5;
            this.maxDecayTime = 5 * 60 * 1000; // 3 minutes
        }

        CronTask.prototype = {

            start: function() {
                this.stop().run();
                return this;
            },

            stop: function() {
                if (this.worker) {
                    window.clearTimeout(this.worker);
                }
                return this;
            },

            run: function() {
                var cronTask = this;
                this.task(function() {
                    cronTask.decayRate = cronTask.isDecay ? Math.max(1, cronTask.decayRate / cronTask.decayMultiplier) : cronTask.decayRate * cronTask.decayMultiplier;
                    var expire = cronTask.interval * cronTask.decayRate;
                    if (!cronTask.isDecay) {
                        expire = (expire >= cronTask.maxDecayTime) ? cronTask.maxDecayTime : expire;
                    }
                    expire = Math.floor(expire);
                    cronTask.worker = window.setTimeout(
                            function () {
                                cronTask.run.call(cronTask);
                            },
                            expire);
                });
            },

            reset: function() {
                this.destroy().run();
                return this;
            },

            destroy: function() {
                this.stop();
                this.decayRate = 1;
                return this;
            }
        };

        var version = "1.0";
        var changeLogUrl = "javascript:void(0);";
        var baseUrl = null;

        var msg = new gadgets.MiniMessage(__MODULE_ID__, document.getElementById("messageContainer"));
        var prefs = new gadgets.Prefs();

        var participants = [];
        var peopleMap = {};
        var viewer = null;
        var currentCursor = null;
        var readMoreLock = false;
        var hasWave = false;
        var currentCommentId = null;
        var commentCheck = false;
        var isFirst = true;
        var commentNotice = "近況を共有しましょう";
        var task = null;
        var contentHeight = 500;
        var viewCount = 10;

        function showMessage(text) {
            var timerMsg = msg.createTimerMessage(text, 3, function() {
                msg.dismissMessage(timerMsg);
                gadgets.window.adjustHeight();
            });
            gadgets.window.adjustHeight();
        }

        function showCommentMessage(id, text) {
            var commentMsg = new gadgets.MiniMessage(__MODULE_ID__, document.getElementById("messageContainer" + id));
            var timerMsg = commentMsg.createTimerMessage(text, 3, function() {
                msg.dismissMessage(timerMsg);
                gadgets.window.adjustHeight();
            });
            gadgets.window.adjustHeight();
        }

        function stripTags(text) {
            return  text.replace(/<\/?[^>]+>/gi, '');
        }

        function splitBytes(src, len) {
            var re = [/[\u0000-\u007F]/g, /[\u0080-\u07FF]/g, /[\u0800-\uFFFF]/g]
            var enc = src;
            for (var i = 0; i < re.length; i++) {
                enc = enc.replace(re[i], Math.pow(10, i));
            }
            var startSrc = 0, startEnc = 0, tmp, splitLen, rslt = [];

            while (startSrc != src.length) {
                tmp = enc.substr(startEnc, len + 1);
                if (tmp.length > len) tmp = tmp.replace(/10*$/, "");
                startEnc += tmp.length;
                splitLen = tmp.replace(/0+/g, "").length;
                rslt.push(src.substr(startSrc, splitLen));
                startSrc += splitLen;
            }
            return rslt;
        }

        function formatDate(date) {
            var currentDate = new Date();
            var result = "";
            if (currentDate.getYear() == date.getYear() && currentDate.getMonth() == date.getMonth() && currentDate.getDate() == date.getDate()) {
                return  ("0" + date.getHours()).slice(-2) + ":" + ("0" + date.getMinutes()).slice(-2);
            } else {
                return date.getMonth() + 1 + "月" + date.getDate() + "日" + " " + ("0" + date.getHours()).slice(-2) + ":" + ("0" + date.getMinutes()).slice(-2);
            }
        }

        function fetchPeople(startIndex, externalId) {
            var callback = function(response) {
                if (response.people) {
                    var people = response.people;
                    var size = people.list.length;
                    for (var i = 0; i < size; i++) {
                        peopleMap[people.list[i].id] = people.list[i].displayName;
                    }
                }
                if (response.viewer) {
                    viewer = response.viewer;
                }
                if (!hasWave) {
                    if (externalId > 0) {
                        fetchHome(externalId);
                    } else {
                        task = new CronTask(refreshHome, 1 * 60 * 1000, true);
                        task.start();
                    }
                } else {
                    fetchHome(externalId);
                }
            };

            var batch = osapi.newBatch();
            if (startIndex == 0) {
                batch.add('viewer', osapi.people.getViewer());
            }
            batch.add('people', osapi.people.getViewerFriends({ startIndex: startIndex, count: 150 }));
            batch.execute(callback);
        }

        function link(src) {
            return src.replace(/(http:\/\/[\x21-\x7e]+)/gi, "<a href='$1' target='_blank'>$1</a>");
        }

        function br(src) {
            return src.replace(/\r\n/g, "<br/>").replace(/(\n|\r)/g, "<br/>").replace(/(&#13;&#10;)/g, "<br/>").replace(/(&#10;|&#13;)/g, "<br/>");
        }


        function commentOn(id) {
            $('.commentField').hide();
            $('.commentInputDummy').show();
            $('.commentInputDummy' + id).hide();
            $('#commentField' + id).show();
            $('#commentField' + id + ' textarea').autogrow();
            $('#commentField' + id + ' textarea').focus();
            currentCommentId = id;
        }


        function appendTimelineHtml(data) {
            var html = convertTimelineHtml(data);
            $(html).hide().prependTo("#content").fadeIn('fast');
        }

        function convertTimelineHtml(data) {

            var template = "<div id=\"message___ID___\" class=\"message\">\
                <div class=\"name\">___USER_NAME___</div>\
                <div class=\"body\">___TEXT___</div>\
                <div class=\"time\">___POST_TIME___ <a href=\"javascript:void(0);\" onclick=\"commentOn('___ID___');\">コメント</a>";
            if (data.user.id == viewer.id) {
                template += " <a href=\"javascript:void(0);\" onclick=\"deleteStatus('___ID___');\">削除</a>";
            }
            template += "</div>";
            template = template.replace("___USER_NAME___", gadgets.util.escapeString(peopleMap[data.user.id]) || "_");
            template = template.replace("___TEXT___", br(link(gadgets.util.escapeString(data.text))));
            template = template.replace("___POST_TIME___", formatDate(new Date(data.created_at)));
            template = template.replace(/___ID___/g, data.id);

            var comment = "<div id=\"commentField___ID___\" class=\"commentField\"><hr/><div id=\"messageContainer___ID___\"></div>\
                    <form action=\"#\" method=\"post\" onsubmit=\"return false;\">\
                    <div class=\"outer\">\
                        <textarea class=\"elastic\" name=\"text\" style=\"border: 0px\" cols=\"10\" rows=\"1\"></textarea>\
                    </div>\
                    <div class=\"right\">\
                    <span style=\"display:none\" id=\"indicator___ID___\" class=\"indicator\">&nbsp;</span><input class=\"comment\" name=\"submit___ID___\" onclick=\"updateComment(this.form, '___ID___', '___USER_ID___');\" type=\"button\" value=\"コメントする\"/>\
            </div>\
            </form></div>";
            comment = comment.replace(/___ID___/g, data.id);
            comment = comment.replace(/___USER_ID___/g, gadgets.util.escapeString(data.user.id));

            template += "<div class=\"comments\">";
            if (data.total_comments_count > 0) {
                if (data.has_more_comments) {
                    template += ("<div class=\"commentCaption\"><a href=\"javascript:void(0);\" onclick=\"fetchAllComment('___ID___');\">コメント" + data.total_comments_count + "件をすべて見る</a></div>").replace(/___ID___/g, data.id);
                }
                $.each(data.comments, function(i) {
                    template += convertCommentHtml(data.comments[i], data.id);
                });
                template += "<div onclick=\"commentOn('___ID___');\" class=\"commentInputDummy commentInputDummy___ID___\">コメントする</div>".replace(/___ID___/g, data.id);
            }
            template += "</div>";
            template += comment;
            template += "</div>";

            return template;
        }

        function appendCommentHtml(data, parentId) {
            var html = convertCommentHtml(data, parentId);
            html += "<div onclick=\"commentOn('___ID___');\" class=\"commentInputDummy commentInputDummy___ID___\">コメントする</div>".replace(/___ID___/g, parentId);
            $(".commentInputDummy" + parentId).hide().remove();
            $(html).hide().appendTo("#message" + parentId + " .comments").fadeIn("fast");
        }

        function convertCommentHtml(data, parentId) {
            var template = "<div id=\"message___ID___\" class=\"message\">\
                <div class=\"name\">___USER_NAME___</div>\
                <div class=\"body\">___TEXT___</div>\
                <div class=\"time\">___POST_TIME___";
            if (data.user.id == viewer.id) {
                template += " <a href=\"javascript:void(0);\" onclick=\"deleteStatus('___ID___', '___PARENT_ID___');\">削除</a>";
            }
            template += "</div></div>";
            template = template.replace("___USER_NAME___", gadgets.util.escapeString(peopleMap[data.user.id]) || "_");
            template = template.replace("___TEXT___", br(link(gadgets.util.escapeString(data.text))));
            template = template.replace("___POST_TIME___", formatDate(new Date(data.created_at)));
            template = template.replace(/___ID___/g, data.id);
            template = template.replace(/___PARENT_ID___/g, parentId);

            return template;
        }

        function deleteCommentHtml(id) {
            $('#message' + id).slideUp('fast');
        }

        function fetchOne(id, childId) {

            var data = {};
            if (id > 0) {
                data['id'] = id;
            }

            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
            gadgets.io.makeRequest(baseUrl + 'api/statuses/home?ts=' + new Date().getTime(), function(response) {
                $("#indicatorContent").hide();
                if (response.rc == 200) {
                    var list = response.data.data.list;
                    var resultHtml = "";
                    $.each(list, function(i) {
                        if (childId > 0) {
                            if (currentCommentId == list[i].id) {
                                $.each(list[i].comments, function(j) {
                                    if (childId == list[i].comments[j].id) {
                                        var html = convertCommentHtml(list[i].comments[j], list[i].id);
                                        $(html).hide().appendTo("#message" + list[i].id + " .comments").fadeIn("fast");
                                    }
                                });
                            } else {
                                resultHtml += convertTimelineHtml(list[i]);
                                $("#message" + list[i].id).fadeOut("fast").remove();
                            }
                        } else {
                            resultHtml += convertTimelineHtml(list[i]);
                        }
                    });
                    $(resultHtml).hide().prependTo("#content").fadeIn("fast");
                }
            }, params);
            /*
             $.get(baseUrl + 'api/statuses/home?ts=' + new Date().getTime() + ' signed', params,
             function(response, status) {
             $("#indicatorContent").hide();
             if (status == 'success') {
             var list = response.data.list;
             var resultHtml = "";
             $.each(list, function(i) {
             if (childId > 0) {
             if (currentCommentId == list[i].id) {
             $.each(list[i].comments, function(j) {
             if (childId == list[i].comments[j].id) {
             var html = convertCommentHtml(list[i].comments[j], list[i].id);
             $(html).hide().appendTo("#message" + list[i].id + " .comments").fadeIn("fast");
             }
             });
             } else {
             resultHtml += convertTimelineHtml(list[i]);
             $("#message" + list[i].id).fadeOut("fast").remove();
             }
             } else {
             resultHtml += convertTimelineHtml(list[i]);
             }
             });
             $(resultHtml).hide().prependTo("#content").fadeIn("fast");
             }
             }, 'json');
             */
        }

        function fetchHome(id) {
            var data = {};
            if (id > 0) {
                data['id'] = id;
            }
            data['count'] = viewCount;

            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
            gadgets.io.makeRequest(baseUrl + 'api/statuses/home?ts=' + new Date().getTime(), function(response) {
                $("#indicatorContent").hide();
                if (response.rc == 200) {
                    if (contentHeight > 0) {
                        $(".timeline").css("height", contentHeight + "px");
                        $(".timeline").css("overflow", "scroll");
                        $(".timeline").css("overflow-x", "hidden");
                        gadgets.window.adjustHeight();
                    }

                    var list = response.data.data.list;
                    var resultHtml = "";
                    $.each(list, function(i) {
                        resultHtml += convertTimelineHtml(list[i]);
                    });

                    if (contentHeight == 0) {
                        if (response.data.data.has_next) {
                            resultHtml += "<div class=\"readMore\"><a href=\"javascript:void(0);\" onclick=\"readMore('___CURSOR___');\">もっと見る</a></div>".replace(/___CURSOR___/g, response.data.data.cursor);
                        }
                    }
                    currentCursor = response.data.data.has_next ? response.data.data.cursor : null;
                    $("#content").empty();
                    $(resultHtml).hide().appendTo("#content").fadeIn("fast");

                    gadgets.window.adjustHeight();
                }
            }, params);

            /*
             $.get(baseUrl + 'api/statuses/home?ts=' + new Date().getTime() + ' signed', params,
             function(response, status) {
             $("#indicatorContent").hide();
             if (status == 'success') {

             if (contentHeight > 0) {
             $(".timeline").css("height", contentHeight + "px");
             $(".timeline").css("overflow", "scroll");
             $(".timeline").css("overflow-x", "hidden");
             gadgets.window.adjustHeight();
             }

             var list = response.data.list;
             var resultHtml = "";
             $.each(list, function(i) {
             resultHtml += convertTimelineHtml(list[i]);
             });

             if (contentHeight == 0) {
             if (response.data.has_next) {
             resultHtml += "<div class=\"readMore\"><a href=\"javascript:void(0);\" onclick=\"readMore('___CURSOR___');\">もっと見る</a></div>".replace(/___CURSOR___/g, response.data.cursor);
             }
             }
             currentCursor = response.data.has_next ? response.data.cursor : null;
             $("#content").empty();
             $(resultHtml).hide().appendTo("#content").fadeIn("fast");

             gadgets.window.adjustHeight();
             }
             }, 'json');
             */
        }

        function refreshHome(retry) {
            var data = {};
            data['count'] = viewCount;

            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
            gadgets.io.makeRequest(baseUrl + 'api/statuses/home?ts=' + new Date().getTime(), function(response) {
                $("#indicatorContent").hide();
                if (response.rc == 200) {
                    if (contentHeight > 0) {
                        $(".timeline").css("height", contentHeight + "px");
                        $(".timeline").css("overflow", "scroll");
                        $(".timeline").css("overflow-x", "hidden");
                        gadgets.window.adjustHeight();
                    }

                    var list = response.data.data.list;
                    var resultHtml = "";
                    if (currentCommentId == null) {
                        $.each(list, function(i) {
                            resultHtml += convertTimelineHtml(list[i]);
                            $("#message" + list[i].id).fadeOut("fast").remove();
                        });


                        if (contentHeight == 0) {
                            if (response.data.data.has_next) {
                                resultHtml += "<div class=\"readMore\"><a href=\"javascript:void(0);\" onclick=\"readMore('___CURSOR___');\">もっと見る</a></div>".replace(/___CURSOR___/g, response.data.data.cursor);
                            }
                        }

                        if (isFirst) {
                            currentCursor = response.data.data.has_next ? response.data.data.cursor : null;
                            isFirst = false;
                        }
                        $(resultHtml).hide().prependTo("#content").fadeIn("fast");
                    }

                    gadgets.window.adjustHeight();

                    retry();
                }
            }, params);
            /*
             $.get(baseUrl + 'api/statuses/home?ts=' + new Date().getTime() + ' signed', params,
             function(response, status) {
             $("#indicatorContent").hide();
             if (status == 'success') {

             if (contentHeight > 0) {
             $(".timeline").css("height", contentHeight + "px");
             $(".timeline").css("overflow", "scroll");
             $(".timeline").css("overflow-x", "hidden");
             gadgets.window.adjustHeight();
             }

             var list = response.data.list;
             var resultHtml = "";
             if (currentCommentId == null) {
             $.each(list, function(i) {
             resultHtml += convertTimelineHtml(list[i]);
             $("#message" + list[i].id).fadeOut("fast").remove();
             });


             if (contentHeight == 0) {
             if (response.data.has_next) {
             resultHtml += "<div class=\"readMore\"><a href=\"javascript:void(0);\" onclick=\"readMore('___CURSOR___');\">もっと見る</a></div>".replace(/___CURSOR___/g, response.data.cursor);
             }
             }

             if (isFirst) {
             currentCursor = response.data.has_next ? response.data.cursor : null;
             isFirst = false;
             }
             $(resultHtml).hide().prependTo("#content").fadeIn("fast");
             }

             gadgets.window.adjustHeight();

             retry();
             }
             }, 'json');
             */
        }

        function readMore(cursor) {
            var data = {};
            data['start'] = cursor;
            data['count'] = viewCount;

            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
            gadgets.io.makeRequest(baseUrl + 'api/statuses/home?ts=' + new Date().getTime(), function(response) {
                if (response.rc == 200) {
                    var list = response.data.data.list;
                    var resultHtml = "";
                    $.each(list, function(i) {
                        resultHtml += convertTimelineHtml(list[i]);
                    });

                    if (contentHeight == 0) {
                        if (response.data.data.has_next) {
                            resultHtml += "<div class=\"readMore\"><a href=\"javascript:void(0);\" onclick=\"readMore('___CURSOR___');\">もっと見る</a></div>".replace(/___CURSOR___/g, response.data.data.cursor);
                        }
                    }
                    currentCursor = response.data.data.has_next ? response.data.data.cursor : null;
                    resultHtml = resultHtml.replace("class=\"message\"", "class=\"message on\"");

                    if (contentHeight == 0) {
                        $(".readMore").hide();
                    }
                    $(resultHtml).hide().appendTo("#content").show();
                    readMoreLock = false;

                    gadgets.window.adjustHeight();
                }
            }, params);
            /*
             $.get(baseUrl + 'api/statuses/home?ts=' + new Date().getTime() + ' signed', params,
             function(response, status) {
             if (status == 'success') {
             var list = response.data.list;
             var resultHtml = "";
             $.each(list, function(i) {
             resultHtml += convertTimelineHtml(list[i]);
             });

             if (contentHeight == 0) {
             if (response.data.has_next) {
             resultHtml += "<div class=\"readMore\"><a href=\"javascript:void(0);\" onclick=\"readMore('___CURSOR___');\">もっと見る</a></div>".replace(/___CURSOR___/g, response.data.cursor);
             }
             }
             currentCursor = response.data.has_next ? response.data.cursor : null;
             resultHtml = resultHtml.replace("class=\"message\"", "class=\"message on\"");

             if (contentHeight == 0) {
             $(".readMore").hide();
             }
             $(resultHtml).hide().appendTo("#content").show();
             readMoreLock = false;

             gadgets.window.adjustHeight();
             }
             }, 'json');
             */
        }

        function fetchAllComment(parentId) {
            var data = {};
            data['parentId'] = parentId;
            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
            gadgets.io.makeRequest(baseUrl + 'api/statuses/comment?ts=' + new Date().getTime(), function(response) {
                if (response.rc == 200) {
                    var list = response.data.data.list;
                    var resultHtml = "";
                    $.each(list, function(i) {
                        resultHtml += convertCommentHtml(list[i], parentId);
                    });
                    resultHtml += "<div onclick=\"commentOn('___ID___');\" class=\"commentInputDummy commentInputDummy___ID___\">コメントする</div>".replace(/___ID___/g, gadgets.util.escapeString(parentId));
                    $('#message' + parentId + " .comments").empty();
                    $(resultHtml).hide().appendTo('#message' + parentId + " .comments").fadeIn("fast");

                    gadgets.window.adjustHeight();
                }
            }, params);

            /*
             $.get(baseUrl + 'api/statuses/comment?ts=' + new Date().getTime() + ' signed', params,
             function(response, status) {
             if (status == 'success') {
             var list = response.data.list;
             var resultHtml = "";
             $.each(list, function(i) {
             resultHtml += convertCommentHtml(list[i], parentId);
             });
             resultHtml += "<div onclick=\"commentOn('___ID___');\" class=\"commentInputDummy commentInputDummy___ID___\">コメントする</div>".replace(/___ID___/g, gadgets.util.escapeString(parentId));
             $('#message' + parentId + " .comments").empty();
             $(resultHtml).hide().appendTo('#message' + parentId + " .comments").fadeIn("fast");

             gadgets.window.adjustHeight();
             }
             }, 'json');
             */
        }


        function updateStatus(form) {
            if (!commentCheck) {
                showMessage("コメントを入力してください。");
                form.text.focus();
                return;
            }

            var data = {};
            data['body'] = form.text.value;
            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
            $("#indicator").show();
            gadgets.io.makeRequest(baseUrl + 'api/statuses/update', function(response) {
                $("#indicator").hide();
                if (response.rc == 200) {
                    if (response.data.status == 200) {
                        showMessage('発言しました。');
                        $(".timeline").scrollTop(0);
                        var submitData = {};
                        submitData.user = {};
                        submitData.id = response.data.data.id;
                        submitData.user.id = viewer.id;
                        submitData.text = form.text.value;
                        submitData.created_at = new Date().toString();
                        appendTimelineHtml(submitData);
                        form.text.value = "";
                        form.text.focus();

                        if (hasWave) {
                            var stateValue = {};
                            stateValue.method = "update_status";
                            stateValue.id = response.data.data.id;
                            wave.getState().submitValue(viewer.id, stateValue);
                        }
                    } else {
                        showMessage(response.data.errorMessage);
                        form.text.focus();
                    }
                }
            }, params);
            /*
             $.post(baseUrl + 'api/statuses/update signed', params,
             function(data, status) {
             $("#indicator").hide();
             if (status == 'success') {
             if (data.status == 200) {
             showMessage('発言しました。');
             $(".timeline").scrollTop(0);
             var submitData = {};
             submitData.user = {};
             submitData.id = data.data.id;
             submitData.user.id = viewer.id;
             submitData.text = form.text.value;
             submitData.created_at = new Date().toString();
             appendTimelineHtml(submitData);
             form.text.value = "";
             form.text.focus();

             if (hasWave) {
             var stateValue = {};
             stateValue.method = "update_status";
             stateValue.id = data.data.id;
             wave.getState().submitValue(viewer.id, stateValue);
             }
             } else {
             showMessage(data.errorMessage);
             form.text.focus();
             }
             }
             }, 'json');
             */
        }

        function updateComment(form, id, userId) {
            var data = {};
            data['body'] = form.text.value;
            data['parentId'] = id;
            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
            params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
            $("#indicator").show();
            gadgets.io.makeRequest(baseUrl + 'api/statuses/update', function(response) {
                $("#indicator").hide();
                if (response.rc == 200) {
                    if (response.data.status == 200) {
                        //showCommentMessage(id, 'コメントしました。');
                        var submitData = {};
                        submitData.user = {};
                        submitData.id = response.data.data.id;
                        submitData.user.id = viewer.id;
                        submitData.text = form.text.value;
                        submitData.created_at = new Date().toString();
                        appendCommentHtml(submitData, id);
                        form.text.value = "";
                        $('#commentField' + id).hide();
                        currentCommentId = null;

                        if (hasWave) {
                            var stateValue = {};
                            stateValue.method = "update_comment";
                            stateValue.parentId = id;
                            stateValue.id = response.data.data.id;
                            wave.getState().submitValue(viewer.id, stateValue);
                        }
                        createActivity(id, userId);

                        gadgets.window.adjustHeight();
                    } else {
                        showCommentMessage(id, response.data.errorMessage);
                        form.text.focus();
                    }
                }
            }, params);
            /*
             $("#indicator" + id).show();
             $.post(baseUrl + 'api/statuses/update signed', params,
             function(data, status) {
             $("#indicator" + id).hide();
             if (status == 'success') {
             if (data.status == 200) {
             //showCommentMessage(id, 'コメントしました。');
             var submitData = {};
             submitData.user = {};
             submitData.id = data.data.id;
             submitData.user.id = viewer.id;
             submitData.text = form.text.value;
             submitData.created_at = new Date().toString();
             appendCommentHtml(submitData, id);
             form.text.value = "";
             $('#commentField' + id).hide();
             currentCommentId = null;

             if (hasWave) {
             var stateValue = {};
             stateValue.method = "update_comment";
             stateValue.parentId = id;
             stateValue.id = data.data.id;
             wave.getState().submitValue(viewer.id, stateValue);
             }
             createActivity(id, userId);

             gadgets.window.adjustHeight();
             } else {
             showCommentMessage(id, data.errorMessage);
             form.text.focus();
             }
             }
             }, 'json');
             */
        }

        function deleteStatus(id, parentId) {
            if (confirm(parentId > 0 ? 'コメントを削除してよろしいでしょうか？' : '投稿を削除してよろしいでしょうか？')) {

                var data = {};
                data['id'] = id;
                if (parentId > 0) {
                    data['parentId'] = parentId;
                }
                var params = {};
                params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
                params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.SIGNED;
                params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.POST;
                params[gadgets.io.RequestParameters.POST_DATA] = gadgets.io.encodeValues(data);
                $("#indicator").show();
                gadgets.io.makeRequest(baseUrl + 'api/statuses/delete', function(response) {
                    $("#indicator").hide();
                    if (response.rc == 200) {
                        if (response.data.status == 200) {
                            deleteCommentHtml(id);

                            if (hasWave) {
                                var stateValue = {};
                                stateValue.method = "delete_status";
                                stateValue.id = id;
                                wave.getState().submitValue(viewer.id, stateValue);
                            }
                        } else {
                            showMessage(response.data.errorMessage);
                            form.text.focus();
                        }
                    }
                }, params);

                /*
                 $.post(baseUrl + 'api/statuses/delete signed', params,
                 function(data, status) {
                 if (status == 'success') {
                 if (data.status == 200) {
                 deleteCommentHtml(id);

                 if (hasWave) {
                 var stateValue = {};
                 stateValue.method = "delete_status";
                 stateValue.id = id;
                 wave.getState().submitValue(viewer.id, stateValue);
                 }
                 } else {
                 showMessage(data.errorMessage);
                 form.text.focus();
                 }
                 }
                 }, 'json');
                 */
            }
        }

        function createActivity(id, to) {
            if (viewer.id != to) {
                var params = {};
                params['title'] = "あなたの投稿にコメントしました。";
                params['priority'] = 1;
                var recipients = [];
                recipients.push(to);
                params['recipients'] = recipients;
                params['externalId'] = id;

                osapi.activities.create({ userId: '@viewer', activity: params }).execute(function(response) {
                    //
                });
            }
        }

        function onLoadState(state, delta) {
            for (key in delta) {
                var data = delta[key];
                if (data.method == "update_status") {
                    fetchOne(data.id);
                }
                if (data.method == "update_comment") {
                    fetchOne(data.parentId, data.id);
                }
                if (data.method == "delete_status") {
                    deleteCommentHtml(data.id);
                }
            }
        }

        function onLoadParticipants() {
            participants = wave.getParticipants();
            //console.log(participants);
        }

        function showVersion() {
            var span = document.createElement("span");
            span.innerHTML = "<a href='" + changeLogUrl + "' target='_blank'>バージョン " + version + " にアップデートされました。</a>";
            var versionMsg = msg.createDismissibleMessage(span, function() {
                msg.dismissMessage(versionMsg);
                gadgets.window.adjustHeight();
            });
        }

        function init() {
            var oldVersion = prefs.getString("version");
            if (version != oldVersion) {
                if (oldVersion) {
                    showVersion();
                }
                prefs.set("version", version);
            }
            var currentView = gadgets.views.getCurrentView();
            var supportViews = gadgets.views.getSupportedViews();

            var parent = gadgets.util.getUrlParameters()['parent'];
            if (parent.indexOf("://localhost:") >= 0) {
                baseUrl = "http://localhost:8888/";
            } else {
                baseUrl = "https://aipo-microblog.appspot.com/";
            }

            if (currentView.getName() == "home") {
                contentHeight = prefs.getInt("p2homeHeight");
            } else if (currentView.getName() == "canvas") {
                contentHeight = prefs.getInt("p3canvasHeight");
            }

            if (currentView.getName() == "home") {
                viewCount = prefs.getInt("p4homeCount");
            } else if (currentView.getName() == "canvas") {
                viewCount = prefs.getInt("p5canvasCount");
            }

            try {
                if (wave && wave.isInWaveContainer()) {
                    hasWave = true;
                }
            } catch(e) {
                // ignore
            }

            if (!hasWave) {
                //console.log("WARNING: wave is not supported.");
            }

            if (currentView.getName() != "popup") {

                if (hasWave) {
                    wave.setStateCallback(onLoadState);
                    wave.setParticipantCallback(onLoadParticipants);
                }

                $('#postButton').click(function(e) {
                    updateStatus(e.target.form);
                });

                $("#inputField textarea").autogrow();

                var commentFocus = function(e) {
                    if (!commentCheck && $(e.target).val() == commentNotice) {
                        $(e.target).val("");
                        commentCheck = true;
                    }
                    $(e.target).css("color", "black");
                }

                var commentBlur = function(e) {
                    if ($(e.target).val() == "") {
                        $(e.target).val(commentNotice);
                        commentCheck = false;
                        $(e.target).css("color", "gray");
                    }

                }
                var countUp = function(e) {
                    var counter = $(e.target).val().length;
                    $("#textCount").text((500 - counter) + " 文字");
                    if (counter > 500) {
                        $("#textCount").addClass("alert");
                    } else {
                        $("#textCount").removeClass("alert");
                    }
                };

                $("#inputField textarea").focus(commentFocus).blur(commentBlur).keyup(countUp).focus(countUp).blur();

                $('.timeline').scroll(function(e) {
                    gadgets.log(e.target.scrollTop + contentHeight + 100);
                    gadgets.log(e.target.scrollHeight);
                    gadgets.log(readMoreLock);
                    if (e.target.scrollTop + contentHeight + 100 >= e.target.scrollHeight && currentCursor != null && !readMoreLock) {
                        readMoreLock = true;
                        readMore(currentCursor);
                    }
                });

                fetchPeople(0);


            } else {
                var externalId = gadgets.views.getParams()['externalId'];
                fetchPeople(0, externalId);
            }
        }

        gadgets.util.registerOnLoadHandler(function() {
            jQuery(function($) {
                init();
            });
        });

        </script>
        ]]></Content>
</Module>