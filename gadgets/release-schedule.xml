<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="リリース7"
            description="会社内でのリリース日共有のためのアプリです。">
        <Require feature="views"/>
        <Require feature="dynamic-height"/>
        <Require feature="minimessage"/>
        <Require feature="tabs"/>
        <Require feature="aipostyle"/>
        <Require feature="osapi"/>
        <Require feature="setprefs"/>
    </ModulePrefs>
    <UserPref name="p1-homeRows" display_name="表示件数（通常時）" datatype="enum" default_value="5">
        <EnumValue value="5"/>
        <EnumValue value="10"/>
        <EnumValue value="50"/>
    </UserPref>
    <UserPref name="p2-canvasRows" display_name="表示件数（最大化時）" datatype="enum" default_value="10">
        <EnumValue value="5"/>
        <EnumValue value="10"/>
        <EnumValue value="50"/>
    </UserPref>


    <Content type="html" view="home,canvas"><![CDATA[
        <div class="aipostyle">
            <form name="date">
                <h3>新規登録</h3>
                <table class="form wide" width="100%">
                    <tr>
                        <th>リリース日</th>
                        <td>
                            <select id="yearid" name="yearname" onchange="monthSet() ; daySet()">年</select>
                            <select id="monthid" name="monthname" onchange="daySet()">月</select>
                            <select id="dayid" name="dayname">日</select>
                        </td>
                    </tr>
                    <tr>
                         <th>タイトル</th>
                        <td><input type="text"
                                   id="commentid" size="15"/></td>
                    </tr>
                        <th>担当者</th>
                        <td><input type="text"
                                   id="staffid" size="15"/></td>
                    </tr>
                </table>
                <div class="center">
                    <input type="button" value="投稿する" onclick="eventSubmit()"/>
                </div>
            </form>

            <form name="schedules">
                <h3>リリーススケジュール</h3>
                <table class="list wide">
                    <thead id = "header">
                    </thead>
                    <tbody id= "status">
                    </tbody>
                </table>
            <div id="pager" style="text-align:center;" class="pager"></div>
            </form>
        </div>

        <script type="text/javascript" src="https://d2hv4ldeur9lfv.cloudfront.net/opensocial-jquery-1.3.2.5.min.js">
        </script>
        <script type="text/javascript">

            //変数設定
                //日時に関する変数
                var dateToday = new Date();
                var yearToday = dateToday.getYear();
                var yearCEToday = (yearToday<2000) ? yearToday+1900 : yearToday ;
                var monthToday = dateToday.getMonth() + 1;
                var dayToday = dateToday.getDate();
                var yearMonthDayToday = yearCEToday*10000 + monthToday*100 + dayToday;
                var msg = new gadgets.MiniMessage();
                var prefs = new gadgets.Prefs();
                var max_per_page = getPrefRows();

            //セレクトボックスを今日に初期化
            function initSelectbox(){
                //あとでセレクトボックスに挿入するHTML
                var yearHtml = new Array();
                var monthHtml = new Array();
                var dayHtml = new Array();
                var daysOfMonth;
                //yearHtmlに現在から10年後までを代入
                for (var i=yearCEToday ; i<=yearCEToday+10 ; i++){
                    yearHtml.push('<option value="' + i + '">' + i + '</option>');
                }

                //monthHtmlに今月から12を代入
                for (var i=monthToday ; i<=12 ; i++){
                    monthHtml.push('<option value="' + i + '">' + i + '</option>');
                }

                //月毎の日数を計算
                if (monthToday == 4 || monthToday == 6 || monthToday == 9 || monthToday == 11){
                    daysOfMonth = 30;
                }else if(monthToday != 2){
                    daysOfMonth = 31;
                }else{
                    daysOfMonth = daysOfFeb(yearToday);
                }

                //dayHtmlに、今日以降の今月の日を代入
                for (var i=dayToday ; i <= daysOfMonth ; i++){
                    dayHtml.push('<option value="' + i + '">' + i + '</option>');
                }

                document.getElementById("yearid").innerHTML = yearHtml;
                document.getElementById("monthid").innerHTML = monthHtml;
                document.getElementById("dayid").innerHTML = dayHtml;
            }

            //月をセレクトボックスに挿入
            function monthSet(){
                //あとでセレクトボックスに挿入するHTML
                var monthHtml = new Array();
                //現在セレクトボックスで選択されている年月
                var yearSelectedNow = document.date.yearname.selectedIndex + yearCEToday;
                var monthSelectedNow;
                    if ( yearSelectedNow == yearCEToday ){
                        monthSelectedNow = document.date.monthname.selectedIndex + monthToday ;
                    }else{
                        monthSelectedNow = document.date.monthname.selectedIndex + 1;
                }
                if ( yearSelectedNow == yearCEToday ) {
                    //monthHtmlに今月から12を代入
                    for (var i=monthToday ; i<=12 ; i++){
                        monthHtml.push('<option value="' + i + '">' + i + '</option>');
                    }
                }else{
                    for (var i=1 ; i<=12 ; i++){
                        monthHtml.push('<option value="' + i + '">' + i + '</option>');
                    }
                }
                document.getElementById("monthid").innerHTML = monthHtml;
            }

            //日をセレクトボックスへ挿入
            function daySet(){
                //あとでセレクトボックスに挿入するHTML
                var dayHtml = new Array();
                //月ごとの日数を計算して入れておく変数
                var daysOfMonth;
                //現在セレクトボックスで選択されている年月
                var yearSelectedNow = document.date.yearname.selectedIndex + yearCEToday;
                 var monthSelectedNow;
                    if ( yearSelectedNow == yearCEToday ){
                        monthSelectedNow = document.date.monthname.selectedIndex + monthToday ;
                    }else{
                        monthSelectedNow = document.date.monthname.selectedIndex + 1;
                }
                //月毎の日数を計算
                if (monthSelectedNow == 4 || monthSelectedNow == 6 || monthSelectedNow == 9 || monthSelectedNow == 11){
                    daysOfMonth = 30;
                }else if(monthSelectedNow != 2){
                    daysOfMonth = 31;
                }else{
                    daysOfMonth = daysOfFeb(yearSelectedNow);
                }

                //dayHtmlに、選択された年と月に合わせた日数を代入
                if ( (yearSelectedNow == yearCEToday) &&(monthSelectedNow == monthToday) ) {
                    for (var i=dayToday ; i <= daysOfMonth ; i++){
                        dayHtml.push('<option value="' + i + '">' + i + '</option>');
                    }
                }else{
                    for (var i=1 ; i <= daysOfMonth ; i++){
                        dayHtml.push('<option value="' + i + '">' + i + '</option>');
                    }
                }
                document.getElementById("dayid").innerHTML = dayHtml;
            }

            //2月の日数を求める関数
            function daysOfFeb(year){
                if (year%4 == 0){
                    if (year%100 ==0){
                        return(28);
                    }else{
                    return(29);
                    }
                }else{
                return(28);
                }
            }

            //入力されたデータを保存する関数（飲みイコ）
            function eventSubmit() {
                //フォームからの値の取得
                var yearSubmitted = $("#yearid").val() ;
                var monthSubmitted = $("#monthid").val();
                var daySubmitted = $("#dayid").val();
                var commentSubmitted = $("#commentid").val();
                var staffSubmitted = $("#staffid").val();

                //ソート用に文字列状態の数字をint型に変換
                var intYearSubmitted =parseInt(yearSubmitted);
                var intMonthSubmitted =parseInt(monthSubmitted);
                var intDaySubmitted =parseInt(daySubmitted);
                var intYearMonthDaySubmitted = intYearSubmitted*10000 + intMonthSubmitted*100 + intDaySubmitted;

                //データ保存用の年月日
                var savedYearMonthDay = yearSubmitted + "年" + monthSubmitted + "月" + daySubmitted + "日";

                //今回入力されたデータを入れておく配列
                var allScheduleDataSaved = {};

                //バリデート
                if (!commentSubmitted || commentSubmitted.length > 100 || !staffSubmitted || staffSubmitted.length > 100){
                    if (!commentSubmitted) {
                        msg.createTimerMessage("コメントを入力してください。", 5);
                        gadgets.window.adjustHeight();
                    }
                    if (commentSubmitted.length > 100) {
                        msg.createTimerMessage("コメントは100文字までで入力してください。", 5);
                        gadgets.window.adjustHeight();
                    }
                    if (!staffSubmitted) {
                        msg.createTimerMessage("担当者を入力してください。", 5);
                        gadgets.window.adjustHeight();
                    }
                    if (staffSubmitted.length > 100) {
                        msg.createTimerMessage("担当者は100文字までで入力してください。", 5);
                        gadgets.window.adjustHeight();
                    }
                    return false;
                }

                var timestamp = new Date().getTime();
                    if (timestamp % 10 == 0){timestamp++;} //timestampの末尾が０になって捨てられることを防止
                var key = '__MODULE_ID__.' + timestamp;
                var date = timestamp + "";

                osapi.appdata.get({ userId: ["@viewer"] ,fields: ['keys'] }).execute(function(response) {
                    for (var userId in response) {
                        var tmp_data = response[userId];
                    }
                    var keys = new Array();
                    if (tmp_data && tmp_data['keys']) {
                        keys = gadgets.json.parse(tmp_data['keys']);
                    }

                    keys.push(key);

                    var data = {};
                    var data1 = {};
                    var data2 = {};
                    data['date'] = gadgets.util.escapeString(date);
                    data['yearMonthDay'] = gadgets.util.escapeString(savedYearMonthDay);
                    data['intYearMonthDay'] = intYearMonthDaySubmitted;
                    data['comment'] = gadgets.util.escapeString(commentSubmitted);
                    data['staff'] = gadgets.util.escapeString(staffSubmitted);
                    data1[key] = gadgets.json.stringify(data);
                    data2['keys'] = gadgets.json.stringify(keys);

                    var batch = osapi.newBatch()
                            .add('update1', osapi.appdata.update({ userId: '@viewer', data: data1, appId: '@app' }))
                            .add('update2', osapi.appdata.update({ userId: '@viewer', data: data2, appId: '@app' }));
                    batch.execute(function(response) {
                        $("#commentid").val("");
                        $("#staffid").val("");
                        // minimessage
                        msg.createTimerMessage("送信しました。", 3, function() {
                            gadgets.window.adjustHeight();
                            return true;
                        });
                        // データの再表示
                       repaint();
                    });
                });
            }
            
            function deleteItem(key){
                    if (confirm("このスケジュールを削除してよろしいでしょうか？")) {
                    osapi.appdata['delete']({ userId: '@viewer' , fields: [key] }).execute(function(response) {
                        repaint();
                        msg.createTimerMessage("削除しました。", 3);
                        gadgets.window.adjustHeight();
                    });
                }
            }

            function deleteOldData(){

            }

            //テーブルの再描画関数
            function repaint() {
                osapi.people.get({ userId: '@viewer' }).execute(function(response) {
                    var users = [];
                    var userIds = [];
                    var row_datas = [];
                    var keys = [];
                    var counter = 0;

                    // ユーザーID
                    var currentUserid = response.id;

                    // ユーザーの読み込み
                    osapi.people.get({ userId: '@viewer', groupId: '@all', startIndex: 0, count: 200}).execute(function(response) {

                        var list = response.list;
                        for (var i in list) {
                            users[list[i].id] = list[i];
                            userIds.push(list[i].id);
                        }
                        // データの取得
                        osapi.appdata.get({ userId: userIds ,fields: ['keys'] }).execute(function(response) {
                            // 全てのkeyを取得して配列keysに入れる
                            for (var userId in response) {
                                var tmp_keys = gadgets.json.parse(response[userId]['keys']);
                                for (var tmp_key in tmp_keys) {
                                    keys.push(tmp_keys[tmp_key]);
                                }
                            }
                                    // 配列keysの中身をkeyとして使ってアプリデータを取得
                                    osapi.appdata.get({ userId: userIds ,fields: keys }).execute(function(response) {
                                        for (var key in response) {
                                            var data = response[key];

                                            for (var key2 in data) {
                                                // データの作成
                                                var rowdata = gadgets.json.parse(data[key2]);
                                                rowdata["key"] = key2;
                                                row_datas.push(rowdata);
                                            }
                                        }

                                        // 日付降順
                                        row_datas.sort(function(a, b) {
                                            return a["intYearMonthDay"] < b["intYearMonthDay"] ? -1 : 1;
                                        });

                                        //本日以降のデータのみを表示（データベースからは過去のデータは消去しない）
                                        $("#status").html("");
                                        for (var i in row_datas) {
                                            if (row_datas[i]["intYearMonthDay"] >= yearMonthDayToday){
                                                var css_class = '';
                                                if (counter >= max_per_page) {
                                                    css_class += ' style="display:none;"';
                                                }
                                                counter++;
                                                var delete_html = '<input type="button" value="削除" onclick="deleteItem(' + row_datas[i]["key"] + ')"/>';
                                                var key_data = '\
                                                       <tr' + css_class + '>\
                                                       <td>' + gadgets.util.escapeString(row_datas[i]["yearMonthDay"]) + '</td>\
                                                       <td>' + gadgets.util.escapeString(row_datas[i]["comment"]) + '</td>\
                                                       <td>' + gadgets.util.escapeString(row_datas[i]["staff"]) + '</td>\
                                                       <td>' + delete_html + '</td>\
                                                       </tr>\
                                                       ';
                                                // データの表示
                                                $("#status").html($("#status").html() + key_data);
                                            }
                                        }

                                        //表示件数切り替え
                                        if (counter > max_per_page) {
                                            var pager = '<a href="javascript:void(0);" onclick="showMore();">全件表示</a>';
                                            $("#pager").html(pager);
                                            $("#pager").show();
                                        }

                                        // テーブルヘッダー
                                        $("#header").html("");
                                        if (counter > 0) {
                                            var header = '\
                                                 <tr>\
                                                 <th>リリース日</th>\
                                                 <th>内容</th>\
                                                 <th>担当者</th>\
                                                 <th class="thin">削除</th>\
                                                 </tr>\
                                                  ';
                                            $("#header").html($("#header").html() + header);
                                        }else{
                                            var header =  '\
                                                 <tr>\
                                                 <th>リリーススケジュールはありません。</th>\
                                                 </tr>\
                                                  ';
                                            $("#header").html($("#header").html() + header);
                                        }

                                        // ウインドウの幅再調整
                                        gadgets.window.adjustHeight();
                                    });
                        });
                    });
                });
            }

            /*
         * 設定の読み込み
         */
        function getPrefRows() {
            // 設定の読み込み
            var currentView = gadgets.views.getCurrentView();
            var temp;
            if (currentView.getName() == "home") {
                temp = prefs.getInt("p1-homeRows");
            } else {
                temp = prefs.getInt("p2-canvasRows");
            }
            return temp;
        }
            
        function showMore() {
            $("#status").children("tr").css("display", "");
            $("#pager").hide();
            // ウインドウの幅再調整
            gadgets.window.adjustHeight();
        }

            //初期化
            function init() {
                initSelectbox();
                repaint();
                gadgets.window.adjustHeight();
            }

        gadgets.util.registerOnLoadHandler(init);
        </script>
    ]]></Content>


</Module>