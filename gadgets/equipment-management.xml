<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="備品管理"
            description="備品の補充状況を簡単設定で一目で確認できるアプリです。残り少なくなれば誰でも状態を更新できます。快適な職場づくりにお役立てください。">
        <Require feature="views"/>
        <Require feature="dynamic-height"/>
        <Require feature="minimessage"/>
        <Require feature="tabs"/>
        <Require feature="aipostyle"/>
        <Require feature="osapi"/>
        <Icon>https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/equipment-management/img/icon/icon16-trans.png</Icon>
    </ModulePrefs>
    <Content type="html"><![CDATA[
        <style>
            .borderNone {
                border: none;
            }

            .borderNone th {
                border: none;
            }

            .borderNone td {
                border: none;
            }

            .pb5 {
                padding-bottom: 5px;
            }

            .mb5 {
                margin-bottom: 5px;
            }

            .fs10_g {
                font-size: 10px;
                color: #555;
            }

            .middle {
                vertical-align: middle;
            }

            .status_on {
                color: #000000;
            }

            .status_min {
               color: #ff9900;
               font-weight: bold;
            }

            .status_off {
               color: #ff0000;
               font-weight: bold;
            }
        </style>
        <div class="aipostyle">
            <form action="#" onsubmit="eventSubmit('on');return false;">
                <input type="text" onfocus="eventItemFocus()" onblur="eventItemBlur()" maxlength=30 id="item" style="width: 17em;"/>
                <input type="submit" style="margin-right:2px;" value="追加する"/>
                <input type="button" value="更新" onclick="repaint()"/>
            </form>
            <hr/>
            <table class="borderNone" style="margin-bottom:15px;">
                <tbody id="status">
                </tbody>
            </table>
        </div>

        <script type="text/javascript" src="https://d2hv4ldeur9lfv.cloudfront.net/opensocial-jquery-1.3.2.5.min.js">
        </script>
        <script type="text/javascript">
        gadgets.util.registerOnLoadHandler(init);

        var groups = null;

        var itemCheck = false;
        var itemNotice = "備品名を追加する（30文字まで）";

        var table = null;
        var prefs = new gadgets.Prefs();

        /*
         * init
         */
        function init() {
            eventItemBlur();
            repaint();
        }

        function eventChange(type, id) {

            if (type == 3) {
                type = "none"
            }
            if (type == 0) {
                type = "on"
            }
            if (type == 1) {
                type = "min"
            }
            if (type == 2) {
                type = "off"
            }
            if (type == 4) {
                type = "ordered"
            }

            var date = (new Date()).getTime() + "";

            osapi.people.get({ userId: '@viewer' }).execute(function(response) {
                // データの作成
                var reporter = response.displayName;
                var send_data = {};
                send_data["type_" + id] = type;
                send_data['date_' + id] = date;
                send_data['reporter_' + id] = reporter;
                osapi.appdata.update({ userId: '@admin', data: send_data }).execute(function(response) {
                    // データの再表示
                    repaint();
                });
            });
        }
        /*
         * submit
         */
        function eventSubmit(type) {
            // フォームから値の取得
            var item = $("#item").val();
            $("#item").val("");
            // 時間の取得
            var date = (new Date()).getTime() + "";
            // バリデート
            if (item.length == 0 || item == itemNotice) {
                var msg = new gadgets.MiniMessage();
                msg.createTimerMessage("備品名は必須です。", 5, function() {
                    gadgets.window.adjustHeight();
                    return true;
                });
                return;
            }

            if (item.length > 30) {
                item = item.substr(0, 30);
            }


            type = gadgets.util.escapeString(type);
            date = gadgets.util.escapeString(date);
            var name = gadgets.util.escapeString(item);
            var semi = 0;
            var flag = 0;
            var keep = [];
            var keep2 = [];
            for (var i = 1; i <= 50; i++) {
                keep.push("type_" + i);
            }
            osapi.appdata.get({ userId: ['@admin'] ,fields: keep }).execute(function(response) {
                if (response.error) {
                    var msg = new gadgets.MiniMessage();
                    msg.createTimerMessage("送信できませんでした。", 3, function() {
                        gadgets.window.adjustHeight();
                        return true;
                    });
                } else {
                    // ユーザーID、アプリデータの連想配列
                    var data = response['@admin'];
                    if(!data){data=[];}
                    for (var i = 1; i <= 50 && flag == 0; i++) {

                        if (data["type_" + i] == null) {
                            keep2.push(i);
                            flag = 2;
                            osapi.people.get({ userId: '@viewer' }).execute(function(response) {
                                // データの作成
                                semi = keep2.pop();
                                var reporter = response.displayName;
                                var send_data = {};
                                send_data["type_" + semi] = type;
                                send_data['date_' + semi] = date;
                                send_data['name_' + semi] = name;
                                send_data['reporter_' + semi] = reporter;
                                osapi.appdata.update({ userId: '@admin', data: send_data }).execute(function(response) {
                                    // データの再表示
                                    repaint();
                                });
                            });
                        }
                        else if (data["type_" + i] == 'none') {
                            keep2.push(i);
                            flag = 1;
                            osapi.people.get({ userId: '@viewer' }).execute(function(response) {
                                // データの作成
                                semi = keep2.pop();
                                var reporter = response.displayName;
                                var send_data = {};
                                send_data["type_" + semi] = type;
                                send_data['date_' + semi] = date;
                                send_data['name_' + semi] = name;
                                send_data['reporter_' + semi] = reporter;
                                osapi.appdata.update({ userId: '@admin', data: send_data }).execute(function(response) {
                                    // データの再表示
                                    repaint();
                                });
                            });
                        }
                        else if (i == 50) {
                            var msg = new gadgets.MiniMessage();
                            msg.createTimerMessage("51個以上はデータ登録ができません。", 5, function() {
                                gadgets.window.adjustHeight();
                            });

                        }
                    }

                }
            });
        }


        function eventItemFocus() {
            if (!itemCheck && $("#item").val() == itemNotice) {
                $("#item").val("");
                itemCheck = true;
            }
            $("#item").css("color", "black");
        }
        function eventItemBlur() {
            if ($("#item").val() == "") {
                $("#item").val(itemNotice);
                itemCheck = false;
                $("#item").css("color", "gray");
            }

        }


        /*
         * テーブルの再描画
         */
        function repaint() {
            var userData = [];
            // データの取得
            var keep = [];
            var selectedAttr = [];
            for (var i = 1; i <= 50; i++) {
                keep.push("type_" + i);
                keep.push("date_" + i);
                keep.push("reporter_" + i);
                keep.push("name_" + i);
                selectedAttr[i]=3;
            }
            osapi.appdata.get({ userId: ['@admin'] ,fields: keep }).execute(function(response) {
                // ユーザーID、アプリデータの連想配列
                if (response.error) {
                    var msg = new gadgets.MiniMessage();
                    msg.createTimerMessage("取得できませんでした。。", 3, function() {
                        gadgets.window.adjustHeight();
                        return true;
                    });
                } else {
                    for (var userId in response) {
                        var data = response[userId];
                        for (var i = 1; i <= 50; i++) {
                            // 在席アイコン
                            var statusText = "";
                            if (data["type_" + i] == "on") {
                                statusText = "補充済";
                                selectedAttr[i]=0;
                            }
                            else if (data["type_" + i] == "min") {
                                statusText = "少ない";
                                selectedAttr[i]=1;
                            }
                            else if (data["type_" + i] == "off") {
                                statusText = "無し";
                                selectedAttr[i]=2;
                            }
                            else if (data["type_" + i] == "ordered") {
                                statusText = "注文済";
                                selectedAttr[i]=4;
                            }

                            if (data["type_" + i] == "on" || data["type_" + i] == "min" || data["type_" + i] == "off" || data["type_" + i] == "ordered") {
                                // データの作成
                                var selected = function(data, target) { if(data == target) { return 'selected="selected"'; } else { return ""; } };
                                userData[i] = '\
<tr>\
    <td valign="top" class="pb5">\
    ' + '<div class="' + " status_" + data["type_" + i] + '">' + data["name_" + i] + '&nbsp;&nbsp;</div><div class="fs10_g">' + getDate(data["date_" + i]) + ' ' + '(' + data['reporter_' + i] + ')&nbsp;&nbsp;</div>' + '</td>\
    <td valign="top" class="pb5">\
      <select name="status" onchange="eventChange(this.options[this.selectedIndex].value, ' + i + ');">\
        <option value="0" ' + selected(selectedAttr[i],0) + '>補充済</option>\
        <option value="1" ' + selected(selectedAttr[i],1) + '>少ない</option>\
        <option value="2" ' + selected(selectedAttr[i],2) + '>無し</option>\
        <option value="4" ' + selected(selectedAttr[i],4) + '>注文済</option>\
      </select>\
      <input type="button" value="削除" onclick="if(window.confirm(\'備品データを削除しますか？\')) eventChange(3 , ' + i + ')"/>\
    </td>\
</tr>\
                            ';
                            }
                            else {
                                userData[i] = '';
                            }
                        }
                        // テーブルの初期化
                        $("#status").html("");
                        // データの表示
                        for (var id in userData) {
                            $("#status").html($("#status").html() + userData[id]);
                        }
                    }
                    // ウインドウの幅再調整
                    gadgets.window.adjustHeight();
                }
            });
        }
        /*
         * 引数で与えられた時刻を整形して返す
         * @param time 1900年からのms
         */
        function getDate(time) {
            var date = getDateArray(time);
            var date_now = getDateArray((new Date()).getTime());

            // 整形して返す
            if (date.year == date_now.year) {
                if (date.month == date_now.month && date.day == date_now.day) {
                    return date_now.month + "月" + date.day + "日 " + date.hour + ":" + date.minute;
                } else {
                    return date.month + "/" + date.day;
                }
            } else {
                return date.year + "/" + date.month + "/" + date.day;
            }
        }
        /*
         * 時刻を配列で返す
         * @param time 1900年からの秒数
         * @return date[] [time,year,month,day,week,hour,minute]
         * ex) date.year
         */
        function getDateArray(time) {
            var r = {};
            var weeks = new Array('日', '月', '火', '水', '木', '金', '土');

            var date = new Date();
            date.setTime(time);
            r.time = time;

            r.year = date.getYear();
            r.month = date.getMonth() + 1;
            r.day = date.getDate();
            r.week = weeks[ date.getDay() ];
            r.hour = date.getHours();
            r.minute = date.getMinutes();

            if (r.year < 2000) {
                r.year += 1900;
            }

            // 頭に　を付ける
            if (r.month < 10) {
                r.month = " " + r.month;
            }
            if (r.day < 10) {
                r.day = " " + r.day;
            }
            if (r.hour < 10) {
                r.hour = " " + r.hour;
            }
            if (r.minute < 10) {
                r.minute = "0" + r.minute;
            }

            return r;
        }
        /*
         * 設定の読み込み
         */
        function getPrefRows(name) {
            // 設定の読み込み
            var currentView = gadgets.views.getCurrentView();
            if (currentView.getName() == "home") {
                return prefs.getInt("p1-homeRows");
            } else {
                return prefs.getInt("p2-canvasRows");
            }
        }

        </script>
        ]]></Content>
</Module>