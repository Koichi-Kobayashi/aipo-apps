<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="飲みイコ"
            description="飲みへのお誘い機能です。">
        <Require feature="views"/>
        <Require feature="dynamic-height"/>
        <Require feature="minimessage"/>
        <Require feature="tabs"/>
        <Require feature="aipostyle"/>
        <Require feature="osapi"/>
        <Require feature="setprefs"/>
        <Icon>https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/nomi-iko/img/icon/icon16-trans.png</Icon>
    </ModulePrefs>
    <UserPref name="version" datatype="hidden"/>
    <Content type="html"><![CDATA[
        <style>

            table.list tr.odd td {
                background: #F5F5F5;
            }

            div.pager a {
                background: #F5F5F5;
                color: #333333;
                padding: 3px;
                border: #CCC 1px solid;
                margin-bottom: 5px;
                display: block;
            }

        </style>
        <div class="aipostyle">
            <table class="borderNone pb5">
                <tbody>
                <tr>
                    <td><input type="text" style="color:gray;"
                               onfocus="eventCommentFocus()"
                               onblur="eventCommentBlur()" maxlength=100
                               id="comment"/><input type="button" value="投稿する"
                                                    onclick="eventSubmit()"
                                                    style="margin:0 0 0 10px;"/>
                    </td>
                </tr>
                </tbody>
            </table>

            <table class="list wide">
                <tbody id="status">
                </tbody>
            </table>
            <div id="pager" style="text-align:center;" class="pager"></div>
        </div>

        <script type="text/javascript" src="https://d2hv4ldeur9lfv.cloudfront.net/opensocial-jquery-1.3.2.5.min.js">
        </script>
        <script type="text/javascript">

        // バージョン情報
        var version = "1.1";
        var changeLogUrl = "javascript:void(0);";
        var change_log = "イベントの削除・参加キャンセル機能がつきました。";

        // コメントフォーム設定
        var commentCheck = false;
        var commentNotice = "コメントを書く（100文字まで）";

        // 変数設定
        var prefs = new gadgets.Prefs();
        var msg = new gadgets.MiniMessage();
        var max_per_page = 5;

        // ページ読込完了後実行コード
        jQuery(function($) {
            init();
        });

        /*
         * init
         */
        function init() {
            var oldVersion = prefs.getString("version");
            if (version != oldVersion) {
                showVersion();
                prefs.set("version", version);
            }
            // コメント
            eventCommentBlur();
            repaint();
        }

        /*
         * お誘い追加
         */
        function eventSubmit() {
            // フォームから値の取得
            var comment = $("#comment").val();
            if (!commentCheck && comment == commentNotice) {
                comment = "";
            }
            // バリデート
            if (!comment) {
                msg.createTimerMessage("コメントを入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }
            if (comment.length > 100) {
                msg.createTimerMessage("コメントは100文字までで入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }

            var timestamp = new Date().getTime();
            var key = '__MODULE_ID__.' + timestamp;
            var date = timestamp + "";

            osapi.appdata.get({ userId: ["@viewer"] ,fields: ['keys'] }).execute(function(response) {
                for (var userId in response) {
                    var data = response[userId];
                }
                var keys = new Array();
                if (data && data['keys']) {
                    keys = gadgets.json.parse(data['keys']);
                }

                keys.push(key);

                var data = {};
                var data1 = {};
                var data2 = {};
                data['comment'] = gadgets.util.escapeString(comment);
                data['date'] = gadgets.util.escapeString(date);
                data1[key] = gadgets.json.stringify(data);
                data2['keys'] = gadgets.json.stringify(keys);

                var batch = osapi.newBatch()
                        .add('update1', osapi.appdata.update({ userId: '@viewer', data: data1, appId: '@app' }))
                        .add('update2', osapi.appdata.update({ userId: '@viewer', data: data2, appId: '@app' }));
                batch.execute(function(response) {
                    $("#comment").val("");
                    // minimessage
                    msg.createTimerMessage("送信しました。", 3, function() {
                        gadgets.window.adjustHeight();
                        return true;
                    });
                    // データの再表示
                    repaint();
                });
            });
        }

        /*
         * お誘いへの参加
         */
        function addSubmit(key) {
            osapi.appdata.get({ userId: ["@viewer"] ,fields: ['add'] }).execute(function(response) {
                for (var userId in response) {
                    var data = response[userId];
                }
                var keys = new Array();
                if (data && data['add']) {
                    keys = gadgets.json.parse(data['add']);
                }

                for (var i in keys) {
                    if (keys[i] == key) {
                        msg.createTimerMessage("すでに登録済みです。", 5);
                        gadgets.window.adjustHeight();
                        return false;
                    }
                }

                var data = {};
                keys.push(key);
                data['add'] = gadgets.json.stringify(keys);

                // データの保存
                osapi.appdata.update({ userId: '@viewer', data: data }).execute(function(response) {
                    // minimessage
                    msg.createTimerMessage("送信しました。", 3, function() {
                        gadgets.window.adjustHeight();
                        return true;
                    });
                    // データの再表示
                    repaint();
                });
            });
        }

        /*
         * お誘い削除
         */
        function deleteItem(key) {
            if (confirm("このお誘いを削除してよろしいでしょうか？")) {

                osapi.appdata.get({ userId: ["@viewer"] ,fields: [key] }).execute(function(response) {
                    for (var userId in response) {
                        var links = response[userId];
                    }
                    var data = new Array();
                    if (links && links[key]) {
                        data = gadgets.json.parse(links[key]);
                    }

                    // ユーザーの読み込み
                    osapi.people.get({ userId: '@viewer', groupId: '@all'}).execute(function(response) {
                        var userIds = [];
                        var counter = 0;

                        var list = response.list;
                        for (var i in list) {
                            userIds.push(list[i].id);
                        }

                        // 参加者データの取得
                        osapi.appdata.get({ userId: userIds ,fields: ['add'] }).execute(function(response) {
                            // ユーザーID、アプリデータの連想配列
                            for (var userId3 in response) {
                                var tmp_add = gadgets.json.parse(response[userId3]['add']);
                                for (var i in tmp_add) {
                                    if (tmp_add[i] == data['date']) {
                                        counter++
                                    }
                                }

                            }
                            if (counter > 0) {
                                // minimessage
                                msg.createTimerMessage("参加者がいるため削除できません。", 3, function() {
                                    gadgets.window.adjustHeight();
                                    return true;
                                });
                            } else {
                                osapi.appdata.get({ userId: ["@viewer"] ,fields: ["keys"] }).execute(function(response) {
                                    for (var userId in response) {
                                        var links = response[userId];
                                    }
                                    var keys = new Array();
                                    if (links && links["keys"]) {
                                        keys = gadgets.json.parse(links["keys"]);
                                    }

                                    // 削除後の処理
                                    var callback = function(response) {
                                        if (response.error) {
                                            // minimessage
                                            msg.createTimerMessage("削除に失敗しました。", 3, function() {
                                                gadgets.window.adjustHeight();
                                                return true;
                                            });
                                        } else {
                                            // minimessage
                                            msg.createTimerMessage("削除しました。", 3, function() {
                                                gadgets.window.adjustHeight();
                                                return true;
                                            });
                                            // データの再表示
                                            repaint();
                                        }
                                    };

                                    var newKeys = new Array();
                                    for (var i in keys) {
                                        if (keys[i] != key) {
                                            newKeys.push(keys[i]);
                                        }
                                    }

                                    var data = {};
                                    data["keys"] = gadgets.json.stringify(newKeys);

                                    var batch = osapi.newBatch()
                                            .add('delete', osapi.appdata['delete']({ userId: '@viewer', fields: [key], appId: '@app' }))
                                            .add('update', osapi.appdata.update({ userId: '@viewer', data: data,  appId: '@app' }));
                                    batch.execute(callback);
                                });
                            }
                        });
                    });
                });

            }
        }

        /*
         * 参加キャンセル
         */
        function deleteMap(key) {
            if (confirm("このお誘いへの参加をキャンセルしてよろしいでしょうか？")) {
                osapi.appdata.get({ userId: ["@viewer"] ,fields: ['add'] }).execute(function(response) {
                    for (var userId in response) {
                        var data = response[userId];
                    }
                    var keys = new Array();
                    if (data && data['add']) {
                        keys = gadgets.json.parse(data['add']);
                    }

                    var newKeys = new Array();
                    for (var i in keys) {
                        if (keys[i] != key) {
                            newKeys.push(keys[i]);
                        }
                    }

                    var data = {};
                    data['add'] = gadgets.json.stringify(newKeys);

                    // データの保存
                    osapi.appdata.update({ userId: '@viewer', data: data }).execute(function(response) {
                        // minimessage
                        msg.createTimerMessage("送信しました。", 3, function() {
                            gadgets.window.adjustHeight();
                            return true;
                        });
                        // データの再表示
                        repaint();
                    });
                });
            }
        }

        /*
         * コメント入力欄フォーカス
         */
        function eventCommentFocus() {
            if (!commentCheck && $("#comment").val() == commentNotice) {
                $("#comment").val("");
                commentCheck = true;
            }
            $("#comment").css("color", "black");
        }

        /*
         * コメント入力欄フォーカス
         */
        function eventCommentBlur() {
            if ($("#comment").val() == "") {
                $("#comment").val(commentNotice);
                commentCheck = false;
                $("#comment").css("color", "gray");
            }

        }

        /*
         * バージョン情報表示
         */
        function showVersion() {
            var span = document.createElement("span");
            span.innerHTML = "<a href='" + changeLogUrl + "' target='_blank'>バージョン " + version + " にアップデートされました。" + change_log + "</a>";
            var versionMsg = msg.createDismissibleMessage(span, function() {
                msg.dismissMessage(versionMsg);
                gadgets.window.adjustHeight();
            });
        }

        /*
         * テーブルの再描画
         */
        function repaint() {
            osapi.people.get({ userId: '@viewer' }).execute(function(response) {
                var users = [];
                var userIds = [];
                var adds_users = [];
                var row_datas = [];
                var keys = [];
                var counter = 0;

                // ユーザーID
                var currentUserid = response.id;

                // ユーザーの読み込み
                osapi.people.get({ userId: '@viewer', groupId: '@all'}).execute(function(response) {

                    var list = response.list;
                    for (var i in list) {
                        users[list[i].id] = list[i];
                        userIds.push(list[i].id);
                    }
                    // データの取得
                    osapi.appdata.get({ userId: userIds ,fields: ['keys'] }).execute(function(response) {
                        // ユーザーID、アプリデータの連想配列
                        for (var userId in response) {
                            var tmp_keys = gadgets.json.parse(response[userId]['keys']);
                            for (var tmp_key in tmp_keys) {
                                keys.push(tmp_keys[tmp_key]);
                            }
                        }
                        // 参加者データの取得
                        osapi.appdata.get({ userId: userIds ,fields: ['add'] }).execute(function(response) {
                            // ユーザーID、アプリデータの連想配列
                            for (var userId3 in response) {
                                var tmp_add = gadgets.json.parse(response[userId3]['add']);
                                for (var i in tmp_add) {
                                    if (!adds_users[tmp_add[i]]) {
                                        adds_users[tmp_add[i]] = '';
                                    } else {
                                        adds_users[tmp_add[i]] += ', ';
                                    }
                                    adds_users[tmp_add[i]] += users[userId3].displayName;
                                }

                            }

                            //自分の参加一覧取得
                            osapi.appdata.get({ userId: ["@viewer"] ,fields: ['add'] }).execute(function(response) {
                                for (var userId in response) {
                                    var data = response[userId];
                                }
                                var my_add_keys = new Array();
                                if (data && data['add']) {
                                    my_add_keys = gadgets.json.parse(data['add']);
                                }
                                // データの取得
                                osapi.appdata.get({ userId: userIds ,fields: keys }).execute(function(response) {
                                    for (var userId2 in response) {
                                        var data = response[userId2];

                                        for (var key in data) {
                                            // データの作成
                                            var rowdata = gadgets.json.parse(data[key]);
                                            rowdata["key"] = key;
                                            rowdata["add_user"] = '';
                                            rowdata["owner"] = users[userId2].displayName;
                                            rowdata["owner_id"] = userId2;
                                            for (var key2 in adds_users) {
                                                if (rowdata["date"] == key2) {
                                                    rowdata["add_user"] = adds_users[key2];
                                                }
                                            }
                                            row_datas.push(rowdata);
                                        }
                                    }

                                    // 日付降順
                                    row_datas.sort(function(a, b) {
                                        return a["date"] < b["date"] ? 1 : -1;
                                    });

                                    // テーブルヘッダー
                                    if (row_datas.length > 0) {
                                        $("#status").html("");
                                        var header = '\
                                <tr>\
                                <th>投稿日時</th>\
                                <th>提案者</th>\
                                <th>コメント</th>\
                                <th>賛同者</th>\
                                <th class="thin">参加</th>\
                                <th class="thin">削除</th>\
                                </tr>\
                                                            ';
                                        $("#status").html($("#status").html() + header);
                                    }
                                    if (row_datas.length > max_per_page) {
                                        var pager = '<a href="javascript:void(0);" onclick="showMore();">全件表示</a>';
                                        $("#pager").html(pager);
                                        $("#pager").show();
                                    }


                                    for (var i in row_datas) {

                                        var css_class = '';
                                        if (counter % 2 == 0) {
                                            css_class = ' class="odd"';
                                        }
                                        if (counter >= max_per_page) {
                                            css_class += ' style="display:none;"';
                                        }
                                        counter++;
                                        var add_html = '<input type="button" value="参加したい！" onclick="addSubmit(' + gadgets.util.escapeString(row_datas[i]["date"]) + ')"/>';
                                        for (var j in my_add_keys) {
                                            if (my_add_keys[j] == row_datas[i]["date"]) {
                                                add_html = '<input type="button" value="キャンセル" onclick="deleteMap(' + gadgets.util.escapeString(row_datas[i]["date"]) + ')"/>';
                                            }
                                        }
                                        var delete_html = '';
                                        if (row_datas[i]["owner_id"] == currentUserid) {
                                            delete_html = '<input type="button" value="削除" onclick="deleteItem(' + gadgets.util.escapeString(row_datas[i]["key"]) + ')"/>';
                                        }

                                        var key_data = '\
<tr' + css_class + '>\
    <td>' + gadgets.util.escapeString(getDate(row_datas[i]["date"])) + '</td>\
    <td align="center">' + gadgets.util.escapeString(row_datas[i]["owner"]) + '</td>\
    <td>' + gadgets.util.escapeString(row_datas[i]["comment"]) + '</td>\
    <td>' + gadgets.util.escapeString(row_datas[i]["add_user"]) + '</td>\
    <td align="center">' + add_html + '</td>\
    <td>' + delete_html + '</td>\
</tr>\
';
                                        // データの表示
                                        $("#status").html($("#status").html() + key_data);
                                    }
                                    // ウインドウの幅再調整
                                    gadgets.window.adjustHeight();
                                });
                            });
                        });
                    });
                });
            });
        }

        /*
         * 全件表示切り替え
         */
        function showMore() {
            $("#status").children("tr").css("display", "");
            $("#pager").hide("slow");
            // ウインドウの幅再調整
            gadgets.window.adjustHeight();
        }

        /*
         * 引数で与えられた時刻を整形して返す
         * @param time 1900年からのms
         */
        function getDate(time) {
            var date = getDateArray(time);
            return date.year + "/" + date.month + "/" + date.day + " (" + date.week + ") " + date.hour + "：" + date.minute;
        }

        /*
         * 時刻を配列で返す
         * @param time 1900年からの秒数
         * @return date[] [time,year,month,day,week,hour,minute]
         * ex) date.year
         */
        function getDateArray(time) {
            var r = {};
            var weeks = new Array('日', '月', '火', '水', '木', '金', '土');

            var date = new Date();
            date.setTime(time);
            r.time = time;

            r.year = date.getYear();
            r.month = date.getMonth() + 1;
            r.day = date.getDate();
            r.week = weeks[ date.getDay() ];
            r.hour = date.getHours();
            r.minute = date.getMinutes();

            if (r.year < 2000) {
                r.year += 1900;
            }

            // 頭に0を付ける
            if (r.month < 10) {
                r.month = "0" + r.month;
            }
            if (r.day < 10) {
                r.day = "0" + r.day;
            }
            if (r.hour < 10) {
                r.hour = "0" + r.hour;
            }
            if (r.minute < 10) {
                r.minute = "0" + r.minute;
            }

            return r;
        }
        </script>
        ]]></Content>
</Module>