<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="飲みイコ"
            description="簡易アンケートアプリです。">
        <Require feature="views"/>
        <Require feature="dynamic-height"/>
        <Require feature="minimessage"/>
        <Require feature="tabs"/>
        <Require feature="aipostyle"/>
        <Require feature="osapi"/>
    </ModulePrefs>
    <UserPref name="p1-homeRows" display_name="表示件数（通常時）" datatype="enum" default_value="5">
        <EnumValue value="5"/>
        <EnumValue value="10"/>
        <EnumValue value="50"/>
    </UserPref>
    <UserPref name="p2-canvasRows" display_name="表示件数（最大化時）" datatype="enum" default_value="10">
        <EnumValue value="5"/>
        <EnumValue value="10"/>
        <EnumValue value="50"/>
    </UserPref>
    <Content type="html"><![CDATA[
        <style>
            .borderNone {
                border: none;
            }

            .borderNone th {
                border: none;
            }

            .borderNone td {
                border: none;
            }

            .pb5 {
                padding-bottom: 5px;
            }

            .mb5 {
                margin-bottom: 5px;
            }

            .fs10_g {
                font-size: 10px;
                color: #555;
            }

            .middle {
                vertical-align: middle;
            }
        </style>
        <div class="aipostyle">
            <table class="wide borderNone">
                <tbody>
                <tr>
                    <td class="borderNone pb5"><input type="text" style="color:gray;"
                                                      onfocus="eventCommentFocus()"
                                                      onblur="eventCommentBlur()" maxlength=100
                                                      id="comment"/></td>
                    <td class="borderNone pb5"><input type="button" value="投稿する"
                                                      onclick="eventSubmit()"/>
                    </td>
                </tr>
                </tbody>
            </table>
            <hr/>

            <table class="borderNone">
                <tbody id="status">
                </tbody>
            </table>
            <div id="pager"></div>
        </div>

        <script type="text/javascript" src="https://d2hv4ldeur9lfv.cloudfront.net/opensocial-jquery-1.3.2.5.min.js">
        </script>
        <script type="text/javascript">
        gadgets.util.registerOnLoadHandler(init);

        var groups = null;

        var commentCheck = false;
        var commentNotice = "コメントを書く（100文字まで）";

        var table = null;
        var page_pre = null;
        var page_next = null;
        var prefs = new gadgets.Prefs();
        var page = 0;
        var pageCount = 0;

        /*
         * init
         */
        function init() {
            // コメント
            eventCommentBlur();
            // グループの読み込み
            osapi.groups.get({ userId: '@viewer' }).execute(function(response) {
                groups = response.list;
                groups.unshift({id:{groupId:'@all'},title:'全体'});
            });
            repaint();
        }

        /*
         * submit
         */
        function eventSubmit() {
            // フォームから値の取得
            var comment = $("#comment").val();
            if (!commentCheck && comment == commentNotice) {
                comment = "";
            }
            // 時間の取得
            var date = (new Date()).getTime() + "";
            // バリデート
            if (!comment) {
                msg.createTimerMessage("コメントを入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }
            if (comment.length  > 100) {
                msg.createTimerMessage("コメントは100文字までで入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }
            
            comment = gadgets.util.escapeString(comment);
            date = gadgets.util.escapeString(date);
            // データの作成
            var data = { comment: comment, date: date, id: date };

            // データの保存
            osapi.appdata.update({ userId: '@viewer', data: data }).execute(function(response) {
                // minimessage
                var msg = new gadgets.MiniMessage();
                msg.createTimerMessage("送信しました。", 3, function() {
                    gadgets.window.adjustHeight();
                    return true;
                });
                // データの再表示
                repaint();
            });
        }
        function addSubmit(userId) {

            // データの作成
            var s = String(userId);
            var data = { add: s };

            // データの保存
            osapi.appdata.update({ userId: '@viewer', data: data }).execute(function(response) {
                // minimessage
                var msg = new gadgets.MiniMessage();
                msg.createTimerMessage("送信しました。", 3, function() {
                    gadgets.window.adjustHeight();
                    return true;
                });
                // データの再表示
                repaint();
            });
        }

        /*
         * ページの変更
         */
        function eventPageChange(num) {
            page = num;
            // 再描画
            repaint();
        }

        function eventCommentFocus() {
            if (!commentCheck && $("#comment").val() == commentNotice) {
                $("#comment").val("");
                commentCheck = true;
            }
            $("#comment").css("color", "black");
        }
        function eventCommentBlur() {
            if ($("#comment").val() == "") {
                $("#comment").val(commentNotice);
                commentCheck = false;
                $("#comment").css("color", "gray");
            }

        }
        /*
         * ページカウントを取得する
         */
        function setPageCount(callback) {
            var index = page * getPrefRows();
            var groupId = groups[$("#groups").val()].id.groupId;
            osapi.people.get({ userId: '@viewer', groupId: groupId, startIndex:index }).execute(function(response) {
                var len = response.list.length;
                pageCount = len / getPrefRows();
                callback();
            });
        }

        function getPrefRows() {
            var currentView = gadgets.views.getCurrentView();
            if (currentView.getName() == "home") {
                return prefs.getInt("p1-homeRows");
            } else {
                return prefs.getInt("p2-canvasRows");
            }
        }

        /*
         * テーブルの再描画
         */
        function repaint() {
            // ユーザーの読み込み
            var index = page * getPrefRows();
            osapi.people.get({ userId: '@viewer', groupId: '@all', startIndex:index, count:getPrefRows() }).execute(function(response) {
                var users = [];
                var userIds = [];
                var userData = [];
                var adds = [];
                var adds_users = [];

                var list = response.list;
                for (var i in list) {
                    users[list[i].id] = list[i];
                    userIds.push(list[i].id);
                    // 初期値
                    userData[list[i].id] = '\
<tr>\
    <td valign="top" style="padding:0 5px 5px 0;" nowrap>' + users[list[i].id].displayName + '</td>\
</tr>\
                            ';
                }

                // データの取得
                osapi.appdata.get({ userId: userIds ,fields: ['add'] }).execute(function(response) {
                    for (var userId in response) {
                        var data = response[userId];
                        adds.push(data["add"]);
                        adds_users.push(userId);
                    }
                // データの取得
                osapi.appdata.get({ userId: userIds ,fields: ['id','comment','date'] }).execute(function(response) {
                    // ユーザーID、アプリデータの連想配列
                    for (var userId in response) {
                        var data = response[userId];

                        var add_users_list = "";
                    for (var key in adds) {
                         if(adds[key] ==  data["id"]){
                             add_users_list += users[adds_users[key]].displayName + ', ';
                         }
                    }


                        // データの作成
                        userData[userId] = '\
<tr>\
    <td valign="top" style="padding:0 5px 5px 0;" nowrap>' + users[userId].displayName + '</td>\
    <td valign="top" style="padding:0 5px 5px 0;">' + data["comment"] + '</td>\
    <td valign="top" style="padding:0 5px 5px 0;" nowrap>' + getDate(data["date"]) + '</td>\
    <td valign="top" style="padding:0 5px 5px 0;" nowrap>' + add_users_list + '</td>\
    <td valign="top" style="padding:0 5px 5px 0;" nowrap><input type="button" value="いいね！" onclick="addSubmit(' + data["id"] + ')"/></td>\
</tr>\
                            ';
                    }
                    // テーブルの初期化
                    $("#status").html("");
                    // データの表示
                    for (var id in userData) {
                        $("#status").html($("#status").html() + userData[id]);
                    }
                    // ウインドウの幅再調整
                    gadgets.window.adjustHeight();
                });
                });
            });
        }

        /*
         * 引数で与えられた時刻を整形して返す
         * @param time 1900年からのms
         */
        function getDate(time) {
            var date = getDateArray(time);
             return date.year + "/" + date.month + "/" + date.day + " ("  + date.week +  ") " + date.hour + "：" + date.minute;
        }
        /*
         * 時刻を配列で返す
         * @param time 1900年からの秒数
         * @return date[] [time,year,month,day,week,hour,minute]
         * ex) date.year
         */
        function getDateArray(time) {
            var r = {};
            var weeks = new Array('日', '月', '火', '水', '木', '金', '土');

            var date = new Date();
            date.setTime(time);
            r.time = time;

            r.year = date.getYear();
            r.month = date.getMonth() + 1;
            r.day = date.getDate();
            r.week = weeks[ date.getDay() ];
            r.hour = date.getHours();
            r.minute = date.getMinutes();

            if (r.year < 2000) {
                r.year += 1900;
            }

            // 頭に0を付ける
            if (r.month < 10) {
                r.month = "0" + r.month;
            }
            if (r.day < 10) {
                r.day = "0" + r.day;
            }
            if (r.hour < 10) {
                r.hour = "0" + r.hour;
            }
            if (r.minute < 10) {
                r.minute = "0" + r.minute;
            }

            return r;
        }


        /*
         * id=pagerにページャを作成
         * @param pageCount（ページ数）,currentPage（現在のページ番号）,callback
         */
        var pager_callback = function() {
        };
        function createPager(pageCount, currentPage, callback) {
            pager_callback = callback;
            var str = '';
            if (pageCount > 1) {
                var str = '<div class="clearfix"><ul class="pagination">';
                // 初期化
                $("<div></div>")
                for (var i = 0; i < pageCount; i++) {
                    if (i == currentPage) {
                        str += '<li class="selected">';
                    } else {
                        str += '<li>';
                    }
                    str += '<a href="javascript:void(0);" onclick="eventPager(\'' + i.toString() + '\')">';
                    str += (i + 1).toString() + '</a></li>';
                }
                str += '</ul></div>';
            }
            // pagerに登録
            $("#pager").html(str);
        }
        function eventPager(page) {
            pager_callback(page);
            createPager(pageCount, page, pager_callback);
        }
        </script>
        ]]></Content>
</Module>