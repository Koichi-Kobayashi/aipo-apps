<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="飲みイコ"
            description="一言アンケート機能です。">
        <Require feature="views"/>
        <Require feature="dynamic-height"/>
        <Require feature="minimessage"/>
        <Require feature="tabs"/>
        <Require feature="aipostyle"/>
        <Require feature="osapi"/>
        <Icon>https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/nomi-iko/img/icon/icon16-trans.png</Icon>
    </ModulePrefs>
    <Content type="html"><![CDATA[
       <style>
table.listTable{
width:100%;
border:none;
border-collapse:collapse;
margin:5px 0 10px;
}

table.listTable th{
background:#DCDCDC;
font-size:10px;
color:#333333;
padding:3px;
border:#CCC 1px solid;
}

table.listTable td{
background:#FFF;
color:#333333;
padding:5px !important;
}

table.listTable tr.odd td{
background:#F5F5F5;
}

table.listTable td.fs10{
font-size:10px !important;
}

</style>
        <div class="aipostyle">
            <table class="wide borderNone">
                <tbody>
                <tr>
                    <td class="borderNone pb5"><input type="text" style="color:gray;"
                                                      onfocus="eventCommentFocus()"
                                                      onblur="eventCommentBlur()" maxlength=100
                                                      id="comment"/><input type="button" value="投稿する"
                                                                           onclick="eventSubmit()" style="margin:0 0 0 10px;"/>
                    </td>
                </tr>
                </tbody>
            </table>

            <table class="listTable">
                <tbody id="status">
                </tbody>
            </table>
            <div id="pager"></div>
        </div>

        <script type="text/javascript" src="https://d2hv4ldeur9lfv.cloudfront.net/opensocial-jquery-1.3.2.5.min.js">
        </script>
        <script type="text/javascript">
        gadgets.util.registerOnLoadHandler(init);

        var groups = null;

        var commentCheck = false;
        var commentNotice = "コメントを書く（100文字まで）";

        var table = null;
        var page_pre = null;
        var page_next = null;
        var prefs = new gadgets.Prefs();
        var page = 0;
        var pageCount = 0;

        /*
         * init
         */
        function init() {
            // コメント
            eventCommentBlur();
            repaint();
        }

        /*
         * submit
         */
        function eventSubmit() {
            // フォームから値の取得
            var comment = $("#comment").val();
            if (!commentCheck && comment == commentNotice) {
                comment = "";
            }
            // 時間の取得
            var date = (new Date()).getTime() + "";
            // バリデート
            if (!comment) {
                msg.createTimerMessage("コメントを入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }
            if (comment.length > 100) {
                msg.createTimerMessage("コメントは100文字までで入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }

            comment = gadgets.util.escapeString(comment);
            date = gadgets.util.escapeString(date);

            osapi.appdata.get({ userId: ["@viewer"] ,fields: ['keys'] }).execute(function(response) {
                for (var userId in response) {
                    var data = response[userId];
                }
                var keys = new Array();
                if (data && data['keys']) {
                    keys = gadgets.json.parse(data['keys']);
                }

                var timestamp = new Date().getTime();
                var key = '__MODULE_ID__.' + timestamp;
                keys.push(key);

                var data = {};
                var data1 = {};
                var data2 = {};
                data['comment'] = comment;
                data['date'] = date;
                data1[key] = gadgets.json.stringify(data);
                data2['keys'] = gadgets.json.stringify(keys);

                var batch = osapi.newBatch()
                        .add('update1', osapi.appdata.update({ userId: '@viewer', data: data1, appId: '@app' }))
                        .add('update2', osapi.appdata.update({ userId: '@viewer', data: data2, appId: '@app' }));
                batch.execute(function(response) {
                    // minimessage
                    var msg = new gadgets.MiniMessage();
                    msg.createTimerMessage("送信しました。", 3, function() {
                        $("#comment").val("");
                        gadgets.window.adjustHeight();
                        return true;
                    });
                    // データの再表示
                    repaint();
                });
            });
        }

        function addSubmit(key) {
            osapi.appdata.get({ userId: ["@viewer"] ,fields: ['add'] }).execute(function(response) {
                for (var userId in response) {
                    var data = response[userId];
                }
                var keys = new Array();
                if (data && data['add']) {
                    keys = gadgets.json.parse(data['add']);
                }

                for (var i in keys) {
                    if (keys[i] == key) {
                        var msg = new gadgets.MiniMessage();
                        msg.createTimerMessage("すでに登録済みです。", 5);
                        gadgets.window.adjustHeight();
                        return false;
                    }
                }

                var data = {};
                keys.push(key);
                data['add'] = gadgets.json.stringify(keys);

                // データの保存
                osapi.appdata.update({ userId: '@viewer', data: data }).execute(function(response) {
                    // minimessage
                    var msg = new gadgets.MiniMessage();
                    msg.createTimerMessage("送信しました。", 3, function() {
                        gadgets.window.adjustHeight();
                        return true;
                    });
                    // データの再表示
                    repaint();
                });
            });
        }

        function eventCommentFocus() {
            if (!commentCheck && $("#comment").val() == commentNotice) {
                $("#comment").val("");
                commentCheck = true;
            }
            $("#comment").css("color", "black");
        }

        function eventCommentBlur() {
            if ($("#comment").val() == "") {
                $("#comment").val(commentNotice);
                commentCheck = false;
                $("#comment").css("color", "gray");
            }

        }

        /*
         * テーブルの再描画
         */
        function repaint() {
            // ユーザーの読み込み
            osapi.people.get({ userId: '@viewer', groupId: '@all'}).execute(function(response) {
                var users = [];
                var userIds = [];
                var adds_users = [];
                var keys = [];
                // テーブルの初期化
                $("#status").html("");
                                    var header = '\
<tr>\
<th width="12%">投稿日時</th>\
<th>提案者</th>\
<th>コメント</th>\
<th>賛同者</th>\
<th width="10%"></th>\
</tr>\
                            ';
                 $("#status").html($("#status").html() + header);

                var list = response.list;
                for (var i in list) {
                    users[list[i].id] = list[i];
                    userIds.push(list[i].id);
                }
                // データの取得
                osapi.appdata.get({ userId: userIds ,fields: ['keys'] }).execute(function(response) {
                    // ユーザーID、アプリデータの連想配列
                    for (var userId in response) {
                        var tmp_keys = gadgets.json.parse(response[userId]['keys']);
                        for (var tmp_key in tmp_keys) {
                            keys.push(tmp_keys[tmp_key]);
                        }
                    }
                    // データの取得
                    osapi.appdata.get({ userId: userIds ,fields: ['add'] }).execute(function(response3) {
                        // ユーザーID、アプリデータの連想配列
                        for (var userId3 in response3) {
                            var tmp_add = gadgets.json.parse(response3[userId3]['add']);
                            for (var i in tmp_add) {
                                if (!adds_users[tmp_add[i]]) {
                                    adds_users[tmp_add[i]] = '';
                                } else {
                                    adds_users[tmp_add[i]] += ', ';
                                }
                                adds_users[tmp_add[i]] += users[userId3].displayName;
                            }

                        }
                        // データの取得
                        osapi.appdata.get({ userId: userIds ,fields: keys }).execute(function(response2) {
                            for (var userId2 in response2) {
                                var data = response2[userId2];

                                for (var key in data) {
                                    // データの作成
                                    var rowdata = gadgets.json.parse(data[key]);
                                    var add_user = '';
                                    for (var key2 in adds_users) {
                                        if (rowdata["date"] == key2) {
                                            add_user = adds_users[key2];
                                        }
                                    }
                                    var key_data = '\
<tr>\
    <td class="fs10" nowrap="nowrap">' + getDate(rowdata["date"]) + '</td>\
    <td nowrap="nowrap" align="center">' + users[userId2].displayName + '</td>\
    <td>' + rowdata["comment"] + '</td>\
    <td>' + add_user + '</td>\
    <td nowrap><input type="button" value="参加したい！" onclick="addSubmit(' + rowdata["date"] + ')"/></td>\
</tr>\
                            ';
                                    // データの表示
                                    $("#status").html($("#status").html() + key_data);
                                }
                            }
                            // ウインドウの幅再調整
                            gadgets.window.adjustHeight();
                        });
                    });
                });
            });
        }

        /*
         * 引数で与えられた時刻を整形して返す
         * @param time 1900年からのms
         */
        function getDate(time) {
            var date = getDateArray(time);
            return date.year + "/" + date.month + "/" + date.day + " (" + date.week + ") " + date.hour + "：" + date.minute;
        }

        /*
         * 時刻を配列で返す
         * @param time 1900年からの秒数
         * @return date[] [time,year,month,day,week,hour,minute]
         * ex) date.year
         */
        function getDateArray(time) {
            var r = {};
            var weeks = new Array('日', '月', '火', '水', '木', '金', '土');

            var date = new Date();
            date.setTime(time);
            r.time = time;

            r.year = date.getYear();
            r.month = date.getMonth() + 1;
            r.day = date.getDate();
            r.week = weeks[ date.getDay() ];
            r.hour = date.getHours();
            r.minute = date.getMinutes();

            if (r.year < 2000) {
                r.year += 1900;
            }

            // 頭に0を付ける
            if (r.month < 10) {
                r.month = "0" + r.month;
            }
            if (r.day < 10) {
                r.day = "0" + r.day;
            }
            if (r.hour < 10) {
                r.hour = "0" + r.hour;
            }
            if (r.minute < 10) {
                r.minute = "0" + r.minute;
            }

            return r;
        }
        </script>
        ]]></Content>
</Module>