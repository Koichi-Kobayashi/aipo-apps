<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs
            title="チャットルーム"
            description="一言つぶやくことができるチャットルームです。古い発言から削除されます。">
        <Require feature="views"/>
        <Require feature="dynamic-height"/>
        <Optional feature="aipostyle"/>
        <Require feature="minimessage"/>
        <Require feature="osapi"/>
    </ModulePrefs>
    <UserPref name="p1-homeRows" display_name="表示件数（通常時）" datatype="enum" default_value="5">
        <EnumValue value="5"/>
        <EnumValue value="10"/>
        <EnumValue value="30"/>
        <EnumValue value="50"/>
    </UserPref>
    <UserPref name="p2-canvasRows" display_name="表示件数（最大化時）" datatype="enum" default_value="10">
        <EnumValue value="5"/>
        <EnumValue value="10"/>
        <EnumValue value="30"/>
        <EnumValue value="50"/>
    </UserPref>
    <UserPref name="p3-autoReload" display_name="自動更新" datatype="enum" default_value="1">
        <EnumValue value="0" display_value="自動更新しない"/>
        <EnumValue value="1" display_value="1分毎"/>
        <EnumValue value="5" display_value="5分毎"/>
        <EnumValue value="10" display_value="10分毎"/>
        <EnumValue value="30" display_value="30分毎"/>
        <EnumValue value="60" display_value="1時間毎"/>
    </UserPref>
    <UserPref name="version" datatype="hidden"/>
    <Content type="html"><![CDATA[
        <style type="text/css">
            .pagination {
                margin: 0 0 5px 0;
                padding: 0;
                height: 2.5em;
            }

            .pagination a {
                text-decoration: none;
                border: solid 1px darkorange;
                color: darkorange;
            }

            .pagination a, .pagination span {
                font-weight: bold;
                display: block;
                float: left;
                margin: 0 5px 0 0;
                padding: .3em .5em;
            }

            .pagination .current {
                background: darkorange;
                color: #fff;
                border: solid 1px darkorange;
            }

            .pagination .current.prev, .pagination .current.next {
                color: #999;
                border-color: #999;
                background: #fff;
            }

        </style>
        <div class="aipostyle">
            <table>
                <tbody>
                <tr>
                    <td><textarea onKeyUp="updateCount(value, 'count', max_length)" cols="40" rows="2"
                                  name="comment" class="text wide" id="comment"></textarea>

                        <div class="right"><span id="count">140</span>文字<input type="button" value="発言する"
                                                                               onclick="eventSubmit()"/></div>
                    </td>
                </tr>
                </tbody>
            </table>
            <hr/>
            <div><input type="button" value="更新"
                        onclick="repaint()"/></div>
            <div id="Pagination" class="pagination"><!-- ページネーション表示 --></div>
            <div id="res"><!-- コンテンツ表示領域 --></div>
            <div id="hiddenresult" style="display:none;">
            </div>
        </div>
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js">
        </script>
        <script type="text/javascript"
                src="https://s3-ap-northeast-1.amazonaws.com/gadgets.aipo.com/chat-room/js/jquery/pagination/jquery.pagination.js"></script>
        <script type="text/javascript">

        // バージョン情報
        var version = "1.0";

        var max_length = 140;
        var max_data = 50;
        var msg = new gadgets.MiniMessage();
        var prefs = new gadgets.Prefs();
        var max_per_page = getPrefRows();

        var colors = ["0099CC", "FF99CC", "FF0033", "005533", "008899", "009900", "FF00FF", "000080", "0000FF", "800080", "808000", "800000", "808080", "008080", "008000", "B8860B", "8B4513", "2F4F4F", "483D8B"];


        // ページ読込完了後実行コード
        jQuery(function($) {
            repaint();
            // リロード
            if (getInterval() > 0) {
                setInterval(function($) {
                    repaint();
                }, getInterval());
            }
        });


        /*
         * 発言
         */
        function eventSubmit() {
            // フォームから値の取得
            var comment = $("#comment").val();
            // バリデート
            if (!comment) {
                msg.createTimerMessage("コメントを入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }
            if (comment.length > max_length) {
                msg.createTimerMessage("コメントは" + max_length + "文字までで入力してください。", 5);
                gadgets.window.adjustHeight();
                return false;
            }

            var timestamp = new Date().getTime();
            var key = '__MODULE_ID__.' + timestamp;
            var date = timestamp + "";

            osapi.appdata.get({ userId: ["@viewer"] ,fields: ['keys'] }).execute(function(response) {
                for (var userId in response) {
                    var tmp_data = response[userId];
                }
                var keys = new Array();
                if (tmp_data && tmp_data['keys']) {
                    keys = gadgets.json.parse(tmp_data['keys']);
                }
                // 古いデータ自動削除
                keys.sort(function(a, b) {
                    return a - b;
                });
                if (keys.length >= max_data) {
                    var delete_key = keys.shift();
                }
                keys.push(key);

                var data = {};
                var data1 = {};
                var data2 = {};
                data['comment'] = gadgets.util.escapeString(comment);
                data['date'] = gadgets.util.escapeString(date);
                data1[key] = gadgets.json.stringify(data);
                data2['keys'] = gadgets.json.stringify(keys);

                var batch = osapi.newBatch()
                        .add('update1', osapi.appdata.update({ userId: '@viewer', data: data1, appId: '@app' }))
                        .add('update2', osapi.appdata.update({ userId: '@viewer', data: data2, appId: '@app' }))
                        .add('delete', osapi.appdata['delete']({ userId: '@viewer', fields: [delete_key], appId: '@app' }));
                batch.execute(function(response) {
                    $("#comment").val("");
                    updateCount(0, 'count', max_length);
                    // minimessage
                    msg.createTimerMessage("発言しました。", 3, function() {
                        gadgets.window.adjustHeight();
                        return true;
                    });
                    // データの再表示
                    repaint();
                });
            });
        }

        /*
         * 発言の表示
         */
        function repaint() {
            var users = [];
            var userIds = [];
            var row_datas = [];
            var keys = [];
            var color_map = [];
            var counter = 0;
            osapi.people.get({ userId: '@viewer' }).execute(function(response) {
                // ユーザーID
                var currentUserid = response.id;

                // ユーザーの読み込み
                osapi.people.get({ userId: '@viewer', groupId: '@all', startIndex: 0, count: 1000}).execute(function(response) {

                    var list = response.list;
                    for (var i in list) {
                        users[list[i].id] = list[i];
                        userIds.push(list[i].id);
                        var cid = i % colors.length;
                        color_map[list[i].id] = colors[cid];
                    }
                    // データの取得
                    osapi.appdata.get({ userId: userIds ,fields: ['keys'] }).execute(function(response) {
                        // ユーザーID、アプリデータの連想配列
                        for (var userId in response) {
                            var tmp_keys = gadgets.json.parse(response[userId]['keys']);
                            for (var tmp_key in tmp_keys) {
                                keys.push(tmp_keys[tmp_key]);
                            }
                        }
                        // データの取得
                        osapi.appdata.get({ userId: userIds ,fields: keys }).execute(function(response) {
                            for (var userId2 in response) {
                                var data = response[userId2];

                                for (var key in data) {
                                    // データの作成
                                    var rowdata = gadgets.json.parse(data[key]);
                                    rowdata["key"] = key;
                                    rowdata["owner"] = users[userId2].displayName;
                                    rowdata["owner_id"] = userId2;
                                    rowdata["color"] = color_map[userId2];
                                    row_datas.push(rowdata);
                                }
                            }

                            // 日付降順
                            row_datas.sort(function(a, b) {
                                return a["date"] < b["date"] ? 1 : -1;
                            });

                            $("#hiddenresult").html("");
                            var key_data = '';
                            for (var i in row_datas) {
                                counter++;
                                if (counter % max_per_page == 1) {
                                    key_data += '<div class="result">';
                                }
                                var delete_html = '';
                                if (row_datas[i]["owner_id"] == currentUserid) {
                                    delete_html = '&nbsp;<span class="small" style="display:none">[<a href="javascript:void(0);" onclick="deleteItem(\'' + gadgets.util.escapeString(row_datas[i]["key"]) + '\');">削除</a>]</span>';
                                } else {
                                    delete_html = '<span class="small" style="display:none"></span>';
                                }

                                key_data += '\
<p style="padding:3px;0"><span style="color: #' + gadgets.util.escapeString(row_datas[i]["color"]) + '">' + gadgets.util.escapeString(row_datas[i]["owner"]) + '</span>\
 ＞' + urlAutoLink(gadgets.util.escapeString(row_datas[i]["comment"])) + ' \
<span style="color: #666666;">(' + gadgets.util.escapeString(getDate(row_datas[i]["date"])) + ')</span>' + delete_html + '</p>\
';
                                if (counter % max_per_page == 0) {
                                    key_data += '</div>';
                                }
                            }
                            // データの表示
                            $("#hiddenresult").html($("#hiddenresult").html() + key_data);
                            initPagination();
                        });
                    });
                });
            });
        }


        /*
         * 削除
         */
        function deleteItem(key) {
            if (confirm("削除してよろしいでしょうか？")) {

                osapi.appdata.get({ userId: ["@viewer"] ,fields: [key] }).execute(function(response) {
                    if (response.error) {
                        // minimessage
                        msg.createTimerMessage("削除に失敗しました。", 3, function() {
                            gadgets.window.adjustHeight();
                            return true;
                        });
                    }
                    osapi.appdata.get({ userId: ["@viewer"] ,fields: ["keys"] }).execute(function(response) {
                        for (var userId in response) {
                            var links = response[userId];
                        }
                        var keys = new Array();
                        if (links && links["keys"]) {
                            keys = gadgets.json.parse(links["keys"]);
                        }

                        // 削除後の処理
                        var callback = function(response) {
                            if (response.error) {
                                // minimessage
                                msg.createTimerMessage("削除に失敗しました。", 3, function() {
                                    gadgets.window.adjustHeight();
                                    return true;
                                });
                            } else {
                                // minimessage
                                msg.createTimerMessage("削除しました。", 3, function() {
                                    gadgets.window.adjustHeight();
                                    return true;
                                });
                                // データの再表示
                                repaint();
                            }
                        };

                        var newKeys = new Array();
                        for (var i in keys) {
                            if (keys[i] != key) {
                                newKeys.push(keys[i]);
                            }
                        }
                        // ソート
                        newKeys.sort(function(a, b) {
                            return a - b;
                        });

                        var data = {};
                        data["keys"] = gadgets.json.stringify(newKeys);

                        var batch = osapi.newBatch()
                                .add('delete', osapi.appdata['delete']({ userId: '@viewer', fields: [key], appId: '@app' }))
                                .add('update', osapi.appdata.update({ userId: '@viewer', data: data,  appId: '@app' }));
                        batch.execute(callback);
                    });
                });
            }
        }

        /**
         * ページャー
         */
        function initPagination() {
            var pageselectCallback = function(page_index, jq) {
                var new_content = $('#hiddenresult div.result:eq(' + page_index + ')').clone();
                $('#res').empty().append(new_content);
                showDelete();
                // ウインドウの幅再調整
                gadgets.window.adjustHeight();
            };
            var num_entries = $('#hiddenresult div.result').length;
            // Create pagination element
            $("#Pagination").pagination(num_entries, {
                next_text:"次へ",
                prev_text:"前へ",
                num_display_entries: 5,
                num_edge_entries: 1,
                callback: pageselectCallback,
                items_per_page:1,
                load_first_page:true
            });
        }


        /**
         * 削除リンク表示
         */
        function showDelete() {
            $("#res div.result p").hover(
                    function () {
                        $("#res div.result p").find("span:last").hide();
                        $(this).find("span:last").show();
                    },
                    function () {
                        $(this).find("span:last").hide();
                    }
            );
        }


        /**
         * 自動リンク
         * @param text
         */
        function urlAutoLink(text) {
            return  text.replace(/(http:\/\/[\x21-\x7e]+)/gi, "<a href='$1' target='_blank'>$1</a>");
        }

        /**
         * 文字数チェック
         * @param str 文字列
         * @param id ElementIｄ
         * @param max 最大文字数
         */
        function updateCount(str, id, max) {
            var org = '#' + id;
            if (str) {
                $(org).html(max - str.length);
            }
            else {
                $(org).html(max);
            }
        }

        /*
         * 設定の読み込み
         */
        function getPrefRows() {
            // 設定の読み込み
            var currentView = gadgets.views.getCurrentView();
            if (currentView.getName() == "home") {
                return prefs.getInt("p1-homeRows");
            } else {
                return prefs.getInt("p2-canvasRows");
            }
        }

        /*
         * 設定の読み込み
         */
        function getInterval() {
            // 設定の読み込み
            var currentView = gadgets.views.getCurrentView();
            return prefs.getInt("p3-autoReload") * 1000 * 60;
        }

        /*
         * 引数で与えられた時刻を整形して返す
         * @param time 1900年からのms
         */
        function getDate(time) {
            var date = getDateArray(time);
            var date_now = getDateArray((new Date()).getTime());

            // 整形して返す
            if (date.year == date_now.year) {
                if (date.month == date_now.month && date.day == date_now.day) {
                    return date.hour + "：" + date.minute;
                } else {
                    return date.year + "/" + date.month + "/" + date.day + "(" + date.week + ")" + date.hour + ":" + date.minute;
                }
            } else {
                return date.year + "/" + date.month + "/" + date.day + "(" + date.week + ")";
            }
        }

        /*
         * 時刻を配列で返す
         * @param time 1900年からの秒数
         * @return date[] [time,year,month,day,week,hour,minute]
         * ex) date.year
         */
        function getDateArray(time) {
            var r = {};
            var weeks = new Array('日', '月', '火', '水', '木', '金', '土');

            var date = new Date();
            date.setTime(time);
            r.time = time;

            r.year = date.getYear();
            r.month = date.getMonth() + 1;
            r.day = date.getDate();
            r.week = weeks[ date.getDay() ];
            r.hour = date.getHours();
            r.minute = date.getMinutes();
            r.second = date.getSeconds();

            if (r.year < 2000) {
                r.year += 1900;
            }

            // 頭に0を付ける
            if (r.month < 10) {
                r.month = "0" + r.month;
            }
            if (r.day < 10) {
                r.day = "0" + r.day;
            }
            if (r.hour < 10) {
                r.hour = "0" + r.hour;
            }
            if (r.minute < 10) {
                r.minute = "0" + r.minute;
            }
            if (r.second < 10) {
                r.second = "0" + r.second;
            }

            return r;
        }
        </script>
        ]]></Content>
</Module>